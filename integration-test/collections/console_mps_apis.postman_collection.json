{
	"info": {
		"_postman_id": "81cdc1e4-31bc-40ca-957f-1355cd87dedc",
		"name": "Console MPS APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4929283",
		"_collection_link": "https://restless-escape-842597.postman.co/workspace/Open-AMT-Cloud-Toolkit~0d3a781d-7dbd-469f-b6ee-a5b75bda71ca/collection/2229705-81cdc1e4-31bc-40ca-957f-1355cd87dedc?action=share&source=collection_link&creator=4929283"
	},
	"item": [
		{
			"name": "AMT",
			"item": [
				{
					"name": "Get Audit Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/log/audit/{{deviceId}}?startIndex=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"log",
								"audit",
								"{{deviceId}}"
							],
							"query": [
								{
									"key": "startIndex",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Event Log",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/log/event/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"log",
								"event",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request user consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI5RW1SSlRiSWlJYjRiSWVTc21nY1dJanJSNkh5RVRxYyIsImV4cCI6MTYyOTU2NjYxMn0.T-RplTGb8wOVcjRcfvS1t-ktUrolErl4IY4I7ih5MKg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/userConsentCode/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"userConsentCode",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send user consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI5RW1SSlRiSWlJYjRiSWVTc21nY1dJanJSNkh5RVRxYyIsImV4cCI6MTYyOTU2NjYxMn0.T-RplTGb8wOVcjRcfvS1t-ktUrolErl4IY4I7ih5MKg",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"consentCode\": \"556249\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/userConsentCode/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"userConsentCode",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel user consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI5RW1SSlRiSWlJYjRiSWVTc21nY1dJanJSNkh5RVRxYyIsImV4cCI6MTYyOTU2NjYxMn0.T-RplTGb8wOVcjRcfvS1t-ktUrolErl4IY4I7ih5MKg",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/userConsentCode/cancel/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"userConsentCode",
								"cancel",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Hardware Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/hardwareInfo/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"hardwareInfo",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get General Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/generalSettings/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"generalSettings",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Power Capabilities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/power/capabilities/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"power",
								"capabilities",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Power State",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/power/state/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"power",
								"state",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Power Action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": 8,\r\n    \"useSOL\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/power/action/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"power",
								"action",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Advanced Power Action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"action\": 100,\r\n    \"useSOL\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/power/bootoptions/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"power",
								"bootoptions",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get AMT Features",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/features/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"features",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set AMT Features",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userConsent\": \"none\",\r\n    \"enableSOL\": false,\r\n    \"enableIDER\": false,\r\n    \"enableKVM\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/features/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"features",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Explorer Call (Version)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Device should not be found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/amt/version/{{deviceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"amt",
								"version",
								"{{deviceId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Devices",
			"item": [
				{
					"name": "All Devices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be 0\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Expect to have 3 properties\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.totalCount).to.be.equal(0)\r",
									"    pm.expect(jsonData.connectedCount).to.be.equal(0)\r",
									"    pm.expect(jsonData.disconnectedCount).to.be.equal(0)\r",
									"    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/stats",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"stats"
							]
						}
					},
					"response": []
				},
				{
					"name": "DISTINCT tags when no devices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Expect to have two tags\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.equal(0)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/tags",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Device with tags as string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Expect an error with wrong device guid format\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Invalid input: json: cannot unmarshal string into Go struct field Device.tags of type []string\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"guid\": \"d12428be-9fa1-4226-9784-54b2038beab6\",\r\n    \"hostname\": \"hostname\",\r\n    \"tags\": \"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.guid).to.be.equal(\"143e4567-e89b-12d3-a456-426614174000\");\r",
									"    pm.expect(jsonData.hostname).to.be.equal(\"hostname\");\r",
									"    pm.expect(jsonData.tags.length).to.be.equal(0);\r",
									"    pm.expect(jsonData.mpsInstance).to.be.equal(\"\");\r",
									"    pm.expect(jsonData.connectionStatus).to.be.equal(false);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"guid\": \"143e4567-e89b-12d3-a456-426614174000\",\r\n    \"friendlyName\": \"friendlyName\",\r\n    \"hostname\": \"hostname\",\r\n    \"tags\": [],\r\n    \"mpsusername\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device by GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/143e4567-e89b-12d3-a456-426614174000",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"143e4567-e89b-12d3-a456-426614174000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device with an invalid GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Expect an error with wrong device guid format\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/143e4567-e89b-12d3-a456-426614174",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"143e4567-e89b-12d3-a456-426614174"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Device hostname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.guid).to.be.equal(\"143e4567-e89b-12d3-a456-426614174000\")\r",
									"    pm.expect(jsonData.hostname).to.be.equal(\"DESKTOP-2T73VQK\")\r",
									"    pm.expect(jsonData.tags.length).to.be.equal(1)  \r",
									"    pm.expect(jsonData.mpsInstance).to.be.equal(\"\")\r",
									"    pm.expect(jsonData.connectionStatus).to.be.equal(false)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"guid\": \"143e4567-e89b-12d3-a456-426614174000\",\r\n        \"hostname\": \"DESKTOP-2T73VQK\",\r\n        \"tags\": [\"acm\"]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Device not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.be.equal(\"Error not found\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"guid\": \"143e4567-e89b-12d3-a456-426614174001\",\r\n        \"hostname\": \"hostname\",\r\n        \"tags\": [\"acm\"]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.guid).to.be.equal(\"143e4567-e89b-12d3-a456-426614174000\")\r",
									"    pm.expect(jsonData.hostname).to.be.equal(\"hostname\")\r",
									"    pm.expect(jsonData.tags.length).to.be.equal(1)  \r",
									"    pm.expect(jsonData.mpsInstance).to.eql(\"\")\r",
									"    pm.expect(jsonData.connectionStatus).to.be.equal(false)\r",
									"    pm.expect(jsonData.dnsSuffix).to.be.equal(\"os.suffix.com\")\r",
									"    pm.expect(jsonData.tags[0]).to.be.equal(\"acm\")\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"guid\": \"143e4567-e89b-12d3-a456-426614174000\",\r\n        \"hostname\": \"hostname\",\r\n        \"friendlyName\": \"friendlyName\",\r\n        \"dnsSuffix\": \"os.suffix.com\",\r\n        \"tags\": [\"acm\"]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.guid).to.be.equal(\"d12428be-9fa1-4226-9784-54b2038beab6\")\r",
									"    pm.expect(jsonData.hostname).to.be.equal(\"hostname\")\r",
									"    pm.expect(jsonData.tags.length).to.be.equal(1)  \r",
									"    pm.expect(jsonData.mpsInstance).to.be.equal(\"\")\r",
									"    pm.expect(jsonData.connectionStatus).to.be.equal(false)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"guid\": \"d12428be-9fa1-4226-9784-54b2038beab6\",\r\n    \"hostname\": \"hostname\",\r\n    \"tags\": [\"ccm\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "DISTINCT tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Expect to have two tags\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.equal(2)\r",
									"    pm.expect(jsonData).contains(\"acm\")\r",
									"    pm.expect(jsonData).contains(\"ccm\")\r",
									"    \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/tags",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"tags"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Devices by tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should bring all devices with tag acm\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData[0].guid).to.eql(\"143e4567-e89b-12d3-a456-426614174000\");\r",
									"   pm.expect(jsonData[0].hostname).to.eql(\"hostname\");\r",
									"   pm.expect(jsonData[0].tags.length).to.eql(1);\r",
									"   pm.expect(jsonData[0].tags[0]).to.eql(\"acm\");\r",
									"   pm.expect(jsonData[0].mpsInstance).to.eql(\"\");\r",
									"   pm.expect(jsonData[0].connectionStatus).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices?tags=acm",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "tags",
									"value": "acm"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Devices by friendlyName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should return one device with friendlyName friendlyName\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData[0].guid).to.eql(\"143e4567-e89b-12d3-a456-426614174000\");\r",
									"   pm.expect(jsonData[0].friendlyName).to.eql(\"friendlyName\");\r",
									"   pm.expect(jsonData[0].tags.length).to.eql(1);\r",
									"   pm.expect(jsonData[0].tags[0]).to.eql(\"acm\");\r",
									"   pm.expect(jsonData[0].mpsInstance).to.eql(\"\");\r",
									"   pm.expect(jsonData[0].connectionStatus).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices?friendlyName=friendlyName",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "friendlyName",
									"value": "friendlyName"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Devices by hostname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should bring all devices with tag acm\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData[0].guid).to.eql(\"143e4567-e89b-12d3-a456-426614174000\");\r",
									"   pm.expect(jsonData[0].hostname).to.eql(\"hostname\");\r",
									"   pm.expect(jsonData[0].tags.length).to.eql(1);\r",
									"   pm.expect(jsonData[0].tags[0]).to.eql(\"acm\");\r",
									"   pm.expect(jsonData[0].mpsInstance).to.eql(\"\");\r",
									"   pm.expect(jsonData[0].connectionStatus).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices?hostname=hostname",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "hostname",
									"value": "hostname"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Devices with count set to true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be 0\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData.data.length).to.eql(2);\r",
									"   pm.expect(jsonData.totalCount).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices?$top=10&$skip=0&$count=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Devices with count set to false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be 0\", function () {\r",
									"   var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData.length).to.eql(2);\r",
									"   pm.expect(jsonData.totalCount).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices?$top=10&$skip=0&$count=false",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Device with an invalid GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Expect an error for invalid guid\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/143e4567-e89b-12d3-a456-426614174",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"143e4567-e89b-12d3-a456-426614174"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Expect to return device info\",function(){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.guid).to.be.equal(\"d12428be-9fa1-4226-9784-54b2038beab7\")\r",
									"    pm.expect(jsonData.hostname).to.be.equal(\"hostname\")\r",
									"    pm.expect(jsonData.tags.length).to.be.equal(1)  \r",
									"    pm.expect(jsonData.mpsInstance).to.be.equal(\"\")\r",
									"    pm.expect(jsonData.connectionStatus).to.be.equal(false)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"guid\": \"d12428be-9fa1-4226-9784-54b2038beab7\",\r\n    \"hostname\": \"hostname\",\r\n    \"tags\": [\"acm\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Expect an error when there is no device\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.eq(\"Error not found\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/143e4567-e89b-12d3-a456-426614174002",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"143e4567-e89b-12d3-a456-426614174002"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/143e4567-e89b-12d3-a456-426614174000",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"143e4567-e89b-12d3-a456-426614174000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/devices/d12428be-9fa1-4226-9784-54b2038beab6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"devices",
								"d12428be-9fa1-4226-9784-54b2038beab6"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}