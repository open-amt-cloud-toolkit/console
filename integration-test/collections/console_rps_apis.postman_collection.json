{
	"info": {
		"_postman_id": "20183268-993e-43c1-a78f-d98832a4a362",
		"name": "Console RPS APIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4929283",
		"_collection_link": "https://restless-escape-842597.postman.co/workspace/Open-AMT-Cloud-Toolkit~0d3a781d-7dbd-469f-b6ee-a5b75bda71ca/collection/2229705-20183268-993e-43c1-a78f-d98832a4a362?action=share&source=collection_link&creator=4929283"
	},
	"item": [
		{
			"name": "Domains",
			"item": [
				{
					"name": "Get All Domains (Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var headerEtag = pm.response.headers.get('Etag');\r",
									"pm.globals.set('etag', headerEtag);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(0)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Domain that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {    \r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"// pm.test(\"Request should fail when domain doesn't exist\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.error).to.eql('Not Found')\r",
									"//     pm.expect(jsonData.message).to.equal('Domain profile dontexist Not Found')\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/dontexist",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"dontexist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain (NewDomain)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql('NewDomain')\r",
									"    pm.expect(result.domainSuffix).to.eql('test.com')\r",
									"    pm.expect(result.provisioningCert).to.eql()\r",
									"    pm.expect(result.provisioningCertStorageFormat).to.eql('raw')\r",
									"    pm.expect(result.provisioningCertPassword).to.eql()\r",
									"    pm.expect(result.expirationDate).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"NewDomain\",\r\n    \"domainSuffix\": \"test.com\",\r\n    \"provisioningCert\": \"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\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"Intel123!\",\r\n    \"expirationDate\": \"12/25/2023\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain without suffix, password, cert, or format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var result = pm.response.json()\r",
									"pm.test(\"Creation should fail when payload is missing required fields\", function () {\r",
									"    pm.expect(result.error).to.contain(\"'DomainSuffix' failed on the 'required' tag\")\r",
									"    pm.expect(result.error).to.contain(\"'ProvisioningCert' failed on the 'required' tag\")\r",
									"    pm.expect(result.error).to.contain(\"'ProvisioningCertStorageFormat' failed on the 'required' tag\")\r",
									"    pm.expect(result.error).to.contain(\"'ProvisioningCertPassword' failed on the 'required' tag\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"NewDomain\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain with password length greater than 64",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Creation should fail when password length greater than 64\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.contain(\"'ProvisioningCertPassword' failed on the 'lte' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo1\",\r\n    \"domainSuffix\": \"vprodemo.1com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"01234567890123456789012345678901234567890123456789012345678901234\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain with invalid cert storage format value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Creation should fail when storage format is invalid\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.contain(\"Key: 'Domain.ProvisioningCertStorageFormat' Error:Field validation for 'ProvisioningCertStorageFormat' failed on the 'oneof' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"NewDomain\",\r\n    \"domainSuffix\": \"test.com\",\r\n    \"provisioningCert\": \"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\",\r\n    \"provisioningCertStorageFormat\": \"wrong\",\r\n    \"provisioningCertPassword\": \"Intel123!\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain (vprodemo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var result = pm.response.json();\r",
									"pm.globals.set(\"domainVersion\", result.version);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql('vprodemo')\r",
									"    pm.expect(result.domainSuffix).to.eql('vprodemo.com')\r",
									"    pm.expect(result.provisioningCert).to.eql()\r",
									"    pm.expect(result.provisioningCertStorageFormat).to.eql('raw')\r",
									"    pm.expect(result.provisioningCertPassword).to.eql()\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"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\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain Duplicate with different case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Creation should fail when domain duplicate with different case\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.contains('unique constraint violation')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vproDemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"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\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Domain with Duplicate Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Creation should fail when domain duplicate\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.contains('unique constraint violation')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"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\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Duplicate Domain Suffix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Creation should fail when domain created with duplicate domain suffix\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.contains('unique constraint violation')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"newvprodemo\",\r\n    \"domainSuffix\": \"vprodemo.com\",\r\n    \"provisioningCert\": \"MIIPHwIBAzCCDtUGCSqGSIb3DQEHAaCCDsYEgg7CMIIOvjCCCTIGCSqGSIb3DQEHBqCCCSMwggkfAgEAMIIJGAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAiez5X6uaJNRwICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEFxT8M8aNmQ21VBJmNP10/mAggiwRGvio668bHHlIDpETQmJHvzEYnF3ou1Z5JkK8RCAdXbD5rkJuoQ6mzEZeyjtE2i4X0RMqVVZ+lfYUMoEysMxjccN87xGfrNvkM4En18E0xnxEcxINQmdRiqB8EniQnaLIdN4Mo7XHH0L3eqbA5ikYzDD3Do4OiGWLIMX5OCJHapR74pOcOglrcVL+QJ2blDBpIzFstgY15DYf7sxEiQPRwlccqaB0FjSxbaz9pZdE8U/dddgReJOTggB+dF5KwkntHF/CAmgAwwaORlRiA13RTRJGcuhjZ+bV9z/WmEfGqEvxAHqfgwXIoNvEpDWO/UEuuf+0Aq0uLLEebtkxfF0LHY+2Pnmw+KB9ECQdMv9GlX8LtTEGJZ8r+KquKjUcC1VNFbrCuoQxmaFNvtcpHDUcmfIzvRFWD5k56lBM+XzPVTysRoi3bmoJ134N+1XAAy8/OkJb8XMeqtJ9jTXdBdNGmhoO53huh6mP+X3tFMHGsWgFt5KAOB/IqnnYwT6gcnHRZYf59Zp9mKLSFE6IvPpkVSqOQJ3YOc6m99E3y4A/FBM0NibglfIKzbHc038NyXltv0X6oR+agDOR0pp7Zn3II0yOjFy//4ot4/Iojnz9F4Lc4ao3pnTOAU1/Osq3UQgtOlabantMfyXuTZb1RGTq52dBpsEbDq8xspIv6lONoH84ZEYDp7lj0N8nkrsH77AWNXwghUV8u3Ejd5dKUci61t5zfbHIsBiPw7aDuCkNA04xSaOKtJxofwe9d/hjmhMXT67gLK7KM4SquHyLUubqWFD3jWXmGkfKRzI+nF+pgC5HV2G85FwdxoqW7ffZ2gLayyaktpE4ncNMdUIOCCzVI3zX4JpUSoz9kJdWx68qKoxYS/UZHdRwVjtPcW8geAbriDIw3oDlAwKaPyyng7fuTQLKpRygDHuIwrCxnrNpzoxMuXkJ140bwOlSsWjjyTX5LZEcbSP6Y426wDYB60nhz3D+ACmrIL0NPGQF1R0OW72uOBCT2CYniDdr0QoexR/4B0LbS7GtPqMyx0LnIWEn1NmhELvW7GfoOOdo8K8cb927vrO9N+zCNcXdTCaM1XuJvS7uLjdREfkFvQ8FXUSf53p0Uu/nynKNzRDHeXuVDv3xaxYvNvlrGZDwgzKVclQrMUoawPyQMxgRniH0UUecx5aHz75RomL0o6NnhbbgPtW1IjsCtRloM+vqYeX/+llq99M/l1YtlGj9IdtmMYXUtvLP0Vv7Me0ro5UwUaZ1TxvdOvDAYzrpN4voaysGLdDG0c2y5+ZjxLYPp01P4IaEd6JHmjVr8IckaSEY9uTz6y3sQg7o2MLWrcRa8SJoK8p6jzGFTXo5DCSMm8CSkHT4yJP3t1Mqisxa98QY5wgJkbfGxBfhDqq0DevtcOxcsqpOhbzOdRYFLiJ0p5sm7zHsDm4cteZys3LgpPRJVeLSfn7SKg/FRWhvrvy5gf1JvqU00LHkDjXN5Fvz0YAI5mdq29iuG8VzAGv4bU8UD+JF+UWdyQS20NRPmbrmw8G1kUo6K1A0m3BciTDyH8siMcZybl2VtWwzN8JoKWpDhYLNTH2+RForqMiQ30EBPz644BVwJS48Pf4h6acZGKTK4x3ro807O8bOJup18QDJIuNmzCxW0exEYs0x20xc8yDFtN/OM4m5x9ob96SpB8hVRmQ0KtYpMuI5AeoyraONRSuR6QUzcE+Xh9sIVajlQUPPpnl4tsDo7cfJeDD/9USna11dLIBIEVdYRrVM7YsBSib4L0RrzJxEBUHt9AWlvX37IO8OCChg2iQ521cI6kaBJR2Z7rLNBM+eRkyhhn9c239hBwgYignB1VRzcPE7KhFZkejz9+VZ9twU2N+1b8H8yldCiC8Mq2/0QFIfluUi1gxTKao4fj7sSUpcy5yl7Am/ra9lLsyrg9OK+FquiyYpwRoadkEiZd30lNyzE7nPBPNxEuAFrCyqb0HASj4lYThlG6qilqM1RgOF9UIyv+y+H/1STFcVXEk61bMoPaa1lb5Dp3tUfSgjEyGrwCjaa//zgC2SkCsataK81/vqBpbPDyf7zOukQH1JNrdY1Y5d+tFjME715MaZc1oTAnbCBAX/GfDC48E98cXYcBn3ZIKe2YHDBAB1dcYj93QApaLt1HO7pHax9zc5JYn4FP+gWZrtCrIF6q2+/P/oR2e7qm+FQtsEXdrMKjpeC4hJTxzMlgF1hutFKDWp128LWD4A4ldocN0bUGDqbVjWypb5jeFuUBnv68tr2/Vnc6z3l2XOXOZGn4DVRJThqtY6vhfixCScg9QX5HhLcoRD19wSHEpbnlWeQEUA+fnYdaI8zCV1A+BmLHUH5gMeIKVqv+pZqTqqFYCcOcEAYxzg3eUWoSY8Toz5lnb+XObbyzLrSECX2/mCzkM1MIObxy7ZUdgDfM9Q18JQs/eA2ZymNENdWcWL4UgzWj0U/Wh13LEFidr+VcmaQSJRR6ybxW2uSP28olVfslWwRYloq/ujQGzgqcN62Nhi4j+wIEiFmLirOy9scuNuKKo+9zDCrT7+YyLxakKg4p87K4lPqcckteAA/lPuWnZ8fT9O8XK9wHXrDUb6KVDmmS4VdR1U5Jy/Za+ghveVHxYKoRi3Xehcnjgblv/m7t4Z+UxwUT9XMEDJPJfu1De/YbnxpGkZIFlRae7C0bgAKwFi+0a/P1ZpPgIbBEsJANM3JTmuylm45Vv20+Pot+BC9pcKl+MCNPdgQx6bJhPJ/fBAVMVg4LjLOQPjRrUbkA6qUc9ph5eVYpVDf1VEAKRvheokuxEM7ZAXFZcctqWQKf3LyFn4egdFHYaBxxUHgbss8YO0iHXTKlmlKgNobvsphG50FJB6qp2Et3l+lIrjy0QrpYvwcIqcAUiOFwCGxRAnoR/AADJNJ7EuiI4wishfaD9ulep1n8IcRUVtjB3yrbGFx6D1tBpf0w68eRJvhouUzCCBYQGCSqGSIb3DQEHAaCCBXUEggVxMIIFbTCCBWkGCyqGSIb3DQEMCgECoIIFMTCCBS0wVwYJKoZIhvcNAQUNMEowKQYJKoZIhvcNAQUMMBwECCYPMxEm1ltGAgIIADAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQ/T9ulY2vAA9dow6ejwOW+QSCBNBqWB0CH2Nsj9QGrtmhBXXZeioN7mJlJJEHLxHwd5yPNdWvzcHq2s2cZqYmBuDMfNJ+0UtVFWsSc85U/kwoq2X9hL4ZTrVYManLr4jROcajMZoWW3rejQssrMjEl9kbZSOkLB9MDtOF8xIdQ811V4XasfxEEhHTkjTXQ5UElsDZmT2t10G8f69xbW6muh3KDSAJBGyLHezSjYKdSZASiqjBDPo68vFyZySKXhhDm0feC9gmLoxU93cVaoPwpwgYGpAvntTX/1gvuh/hhX3zm/fgznXrd+sRjnj1kh1OdjF1K7Dv+XG10rufebsUWH16Q6Li4rmhQCiH0ao3Cnd1IVqRmVjm26Q7VIgNpCcYqwi1+d8QoI2ZAzs/WnIa27uKlXIpXKuHvKkY6ZSeSc8Ujf2oPlCkiG7h47z8uKRP0x/Cp8cqrQLuAczwAA07sSrj1sCUuaYZ/I4jdK83f1LQoZ5QrWlT+lAC+mDaWrA/U3w60xASMtnyVsphOB6xqN2Gk1ccIos107gGhfGBAk23FNfjeq7UdYzzwKl4mecpFTwaLHWghjo++BYaF/yi9mU5npYkvt9RQktoEy4rQ+klrYREq6/oTkBo6X7MRcU4FXWuk4RdTnd/gkoLH7xmgst+A47S7NlcAGZvYEWA/4HsvNkG3/fYTUpHmr68Wbawj5ptN23Dkcm1oSX3jxQrk48umGpKOHomGkswKVm7RiPBBqlO2I6wFBbmSAqsvdDd1NHYGei2VdWiZ3UPBJYPaPqQOlroZqkLn3juuJTI4AO/vJ5LMPwOWEFMoHVqUZEHXDDqFoAAjkoLLSgflhG6+G5911K3sNja648RLRu8pys6gTMF+0S9ZKgeqbH/SJ8zCxU1EXt3KjdoLiwioNtv2V2Tp3oRfsPlfKfl7i4t0PZMENwEnVNQavCT7KZ34ibpFqYGcPkIUgHGbr/AikTQgXMeMfCrV/MWs0wWEmWwqD8vtcwGSo2k3dT83RbzuKSKNMsW1WLN0b+bdYZAYh7oDce4rehbGWFtrMxMSl2L7focRac4Ns7hpd+Ac/q841kescsMAtFPeJcxMans8nTylfhiB+1+e2Sikydy6+ZLT96GZLLDm3uSEwkxgNHtB2eAkv6dPk83rpN1DjLsj8pUu4eh6CuqwqohuILJCyQMDr/7V+wucSHeAqEx2RJx8o9cx7gkfCNnqCt9/UW96bbnnlLpYuUou5R6QyWMxqTSp+s8EgBtXNLaKcjt0gjmEhieAl55LmZn0ePxSJjYyF3AYO1tvxT4wWrLdiAA/Kj7mZcOdpisdjzIJdt9JgMjdmuCiJPvrujcj4rpEyhsBgDTe39eSEWe86yxsUewnacMClv/gmk/8p5sssyjETIEgSiGJxXG3DUcqlJ2nXFlgMojU9XEXir02GlxGzm1QE6USIJZ2d4HT0TAEq8qGssLoWQ+FKGHmbc9Qmm6Own0T6YVAzTJ+llj2dosTo5PT1pM06VyEgVcaREM2PLBZYju0NpRs14hYyQ24039URFa5pmnaYvcQvv3c3U/zlnAKgO6Cpyo3aby+Zrk9z6534YVIgPjNMF7Wp3MYchH+pxSA4ju8ItvGZhy4hof123yxf8Yh4LE5HjvTfG0h9gHqJRAoUH7k8PG1jElMCMGCSqGSIb3DQEJFTEWBBQQ121XP0QcupPfyzRfFXFWVYQnPjBBMDEwDQYJYIZIAWUDBAIBBQAEIG7DUtDht1xHJ77sCWv/Gu/2n+Ecv5Zfl3TTSYF5VzlfBAhEnK6i8ASSZwICCAA=\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Domains",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains?$top=10&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Domains with invalid query params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// pm.test(\"Request should fail with invalid query string\", function () {\r",
									"//     var errors = pm.response.json().errors;\r",
									"//     pm.expect(errors[0].path).to.equal('$top');\r",
									"//     pm.expect(errors[0].msg).to.equal('The number of items to return should be a positive integer');\r",
									"\r",
									"//     pm.expect(errors[1].path).to.equal('$skip');\r",
									"//     pm.expect(errors[1].msg).to.equal('The number of items to skip before starting to collect the result set should be a positive integer');\r",
									"    \r",
									"//     pm.expect(errors[2].path).to.equal('$count');\r",
									"//     pm.expect(errors[2].msg).to.equal('To return total number of records in result set should be boolean');\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains?$top=ten&$skip=0&$count=false",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							],
							"query": [
								{
									"key": "$top",
									"value": "ten"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Domains with count set to true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.length).to.equal(2);\r",
									"    pm.expect(jsonData.totalCount).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains?$top=10&$skip=0&$count=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Domains with count set to false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(2)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains?$top=10&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							],
							"query": [
								{
									"key": "$top",
									"value": "10"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain Suffix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var result = pm.response.json();\r",
									"pm.globals.set(\"domainVersion\", result.version);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result should be equal to payload\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"vprodemo\")\r",
									"    pm.expect(jsonData.domainSuffix).to.eql(\"newvprodemo.com\")\r",
									"    pm.expect(jsonData.provisioningCertStorageFormat).to.eql(\"raw\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"newvprodemo.com\",\r\n    \"provisioningCert\": \"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\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\",\r\n    \"version\": {{domainVersion}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update with Duplicate Domain Suffix",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Creation should fail when domain updated with duplicate domain suffix\", function () {\r",
									"    var result = pm.response.json();\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"test.com\",\r\n    \"provisioningCert\": \"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\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\",\r\n    \"version\": {{domainVersion}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain Cert Password with password length greater than 64",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Updaste should fail when password length greater than 64\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.contains(\"'ProvisioningCertPassword' failed on the 'lte' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"newvprodemo.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"01234567890123456789012345678901234567890123456789012345678901234\",\r\n    \"version\": {{domainVersion}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain Certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result should be equal to payload\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"vprodemo\")\r",
									"    pm.expect(jsonData.domainSuffix).to.eql(\"newvprodemo.com\")\r",
									"    pm.expect(jsonData.provisioningCertStorageFormat).to.eql(\"raw\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"vprodemo\",\r\n    \"domainSuffix\": \"newvprodemo.com\",\r\n    \"provisioningCert\": \"MIIPHwIBAzCCDtUGCSqGSIb3DQEHAaCCDsYEgg7CMIIOvjCCCTIGCSqGSIb3DQEHBqCCCSMwggkfAgEAMIIJGAYJKoZIhvcNAQcBMFcGCSqGSIb3DQEFDTBKMCkGCSqGSIb3DQEFDDAcBAiez5X6uaJNRwICCAAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEFxT8M8aNmQ21VBJmNP10/mAggiwRGvio668bHHlIDpETQmJHvzEYnF3ou1Z5JkK8RCAdXbD5rkJuoQ6mzEZeyjtE2i4X0RMqVVZ+lfYUMoEysMxjccN87xGfrNvkM4En18E0xnxEcxINQmdRiqB8EniQnaLIdN4Mo7XHH0L3eqbA5ikYzDD3Do4OiGWLIMX5OCJHapR74pOcOglrcVL+QJ2blDBpIzFstgY15DYf7sxEiQPRwlccqaB0FjSxbaz9pZdE8U/dddgReJOTggB+dF5KwkntHF/CAmgAwwaORlRiA13RTRJGcuhjZ+bV9z/WmEfGqEvxAHqfgwXIoNvEpDWO/UEuuf+0Aq0uLLEebtkxfF0LHY+2Pnmw+KB9ECQdMv9GlX8LtTEGJZ8r+KquKjUcC1VNFbrCuoQxmaFNvtcpHDUcmfIzvRFWD5k56lBM+XzPVTysRoi3bmoJ134N+1XAAy8/OkJb8XMeqtJ9jTXdBdNGmhoO53huh6mP+X3tFMHGsWgFt5KAOB/IqnnYwT6gcnHRZYf59Zp9mKLSFE6IvPpkVSqOQJ3YOc6m99E3y4A/FBM0NibglfIKzbHc038NyXltv0X6oR+agDOR0pp7Zn3II0yOjFy//4ot4/Iojnz9F4Lc4ao3pnTOAU1/Osq3UQgtOlabantMfyXuTZb1RGTq52dBpsEbDq8xspIv6lONoH84ZEYDp7lj0N8nkrsH77AWNXwghUV8u3Ejd5dKUci61t5zfbHIsBiPw7aDuCkNA04xSaOKtJxofwe9d/hjmhMXT67gLK7KM4SquHyLUubqWFD3jWXmGkfKRzI+nF+pgC5HV2G85FwdxoqW7ffZ2gLayyaktpE4ncNMdUIOCCzVI3zX4JpUSoz9kJdWx68qKoxYS/UZHdRwVjtPcW8geAbriDIw3oDlAwKaPyyng7fuTQLKpRygDHuIwrCxnrNpzoxMuXkJ140bwOlSsWjjyTX5LZEcbSP6Y426wDYB60nhz3D+ACmrIL0NPGQF1R0OW72uOBCT2CYniDdr0QoexR/4B0LbS7GtPqMyx0LnIWEn1NmhELvW7GfoOOdo8K8cb927vrO9N+zCNcXdTCaM1XuJvS7uLjdREfkFvQ8FXUSf53p0Uu/nynKNzRDHeXuVDv3xaxYvNvlrGZDwgzKVclQrMUoawPyQMxgRniH0UUecx5aHz75RomL0o6NnhbbgPtW1IjsCtRloM+vqYeX/+llq99M/l1YtlGj9IdtmMYXUtvLP0Vv7Me0ro5UwUaZ1TxvdOvDAYzrpN4voaysGLdDG0c2y5+ZjxLYPp01P4IaEd6JHmjVr8IckaSEY9uTz6y3sQg7o2MLWrcRa8SJoK8p6jzGFTXo5DCSMm8CSkHT4yJP3t1Mqisxa98QY5wgJkbfGxBfhDqq0DevtcOxcsqpOhbzOdRYFLiJ0p5sm7zHsDm4cteZys3LgpPRJVeLSfn7SKg/FRWhvrvy5gf1JvqU00LHkDjXN5Fvz0YAI5mdq29iuG8VzAGv4bU8UD+JF+UWdyQS20NRPmbrmw8G1kUo6K1A0m3BciTDyH8siMcZybl2VtWwzN8JoKWpDhYLNTH2+RForqMiQ30EBPz644BVwJS48Pf4h6acZGKTK4x3ro807O8bOJup18QDJIuNmzCxW0exEYs0x20xc8yDFtN/OM4m5x9ob96SpB8hVRmQ0KtYpMuI5AeoyraONRSuR6QUzcE+Xh9sIVajlQUPPpnl4tsDo7cfJeDD/9USna11dLIBIEVdYRrVM7YsBSib4L0RrzJxEBUHt9AWlvX37IO8OCChg2iQ521cI6kaBJR2Z7rLNBM+eRkyhhn9c239hBwgYignB1VRzcPE7KhFZkejz9+VZ9twU2N+1b8H8yldCiC8Mq2/0QFIfluUi1gxTKao4fj7sSUpcy5yl7Am/ra9lLsyrg9OK+FquiyYpwRoadkEiZd30lNyzE7nPBPNxEuAFrCyqb0HASj4lYThlG6qilqM1RgOF9UIyv+y+H/1STFcVXEk61bMoPaa1lb5Dp3tUfSgjEyGrwCjaa//zgC2SkCsataK81/vqBpbPDyf7zOukQH1JNrdY1Y5d+tFjME715MaZc1oTAnbCBAX/GfDC48E98cXYcBn3ZIKe2YHDBAB1dcYj93QApaLt1HO7pHax9zc5JYn4FP+gWZrtCrIF6q2+/P/oR2e7qm+FQtsEXdrMKjpeC4hJTxzMlgF1hutFKDWp128LWD4A4ldocN0bUGDqbVjWypb5jeFuUBnv68tr2/Vnc6z3l2XOXOZGn4DVRJThqtY6vhfixCScg9QX5HhLcoRD19wSHEpbnlWeQEUA+fnYdaI8zCV1A+BmLHUH5gMeIKVqv+pZqTqqFYCcOcEAYxzg3eUWoSY8Toz5lnb+XObbyzLrSECX2/mCzkM1MIObxy7ZUdgDfM9Q18JQs/eA2ZymNENdWcWL4UgzWj0U/Wh13LEFidr+VcmaQSJRR6ybxW2uSP28olVfslWwRYloq/ujQGzgqcN62Nhi4j+wIEiFmLirOy9scuNuKKo+9zDCrT7+YyLxakKg4p87K4lPqcckteAA/lPuWnZ8fT9O8XK9wHXrDUb6KVDmmS4VdR1U5Jy/Za+ghveVHxYKoRi3Xehcnjgblv/m7t4Z+UxwUT9XMEDJPJfu1De/YbnxpGkZIFlRae7C0bgAKwFi+0a/P1ZpPgIbBEsJANM3JTmuylm45Vv20+Pot+BC9pcKl+MCNPdgQx6bJhPJ/fBAVMVg4LjLOQPjRrUbkA6qUc9ph5eVYpVDf1VEAKRvheokuxEM7ZAXFZcctqWQKf3LyFn4egdFHYaBxxUHgbss8YO0iHXTKlmlKgNobvsphG50FJB6qp2Et3l+lIrjy0QrpYvwcIqcAUiOFwCGxRAnoR/AADJNJ7EuiI4wishfaD9ulep1n8IcRUVtjB3yrbGFx6D1tBpf0w68eRJvhouUzCCBYQGCSqGSIb3DQEHAaCCBXUEggVxMIIFbTCCBWkGCyqGSIb3DQEMCgECoIIFMTCCBS0wVwYJKoZIhvcNAQUNMEowKQYJKoZIhvcNAQUMMBwECCYPMxEm1ltGAgIIADAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQ/T9ulY2vAA9dow6ejwOW+QSCBNBqWB0CH2Nsj9QGrtmhBXXZeioN7mJlJJEHLxHwd5yPNdWvzcHq2s2cZqYmBuDMfNJ+0UtVFWsSc85U/kwoq2X9hL4ZTrVYManLr4jROcajMZoWW3rejQssrMjEl9kbZSOkLB9MDtOF8xIdQ811V4XasfxEEhHTkjTXQ5UElsDZmT2t10G8f69xbW6muh3KDSAJBGyLHezSjYKdSZASiqjBDPo68vFyZySKXhhDm0feC9gmLoxU93cVaoPwpwgYGpAvntTX/1gvuh/hhX3zm/fgznXrd+sRjnj1kh1OdjF1K7Dv+XG10rufebsUWH16Q6Li4rmhQCiH0ao3Cnd1IVqRmVjm26Q7VIgNpCcYqwi1+d8QoI2ZAzs/WnIa27uKlXIpXKuHvKkY6ZSeSc8Ujf2oPlCkiG7h47z8uKRP0x/Cp8cqrQLuAczwAA07sSrj1sCUuaYZ/I4jdK83f1LQoZ5QrWlT+lAC+mDaWrA/U3w60xASMtnyVsphOB6xqN2Gk1ccIos107gGhfGBAk23FNfjeq7UdYzzwKl4mecpFTwaLHWghjo++BYaF/yi9mU5npYkvt9RQktoEy4rQ+klrYREq6/oTkBo6X7MRcU4FXWuk4RdTnd/gkoLH7xmgst+A47S7NlcAGZvYEWA/4HsvNkG3/fYTUpHmr68Wbawj5ptN23Dkcm1oSX3jxQrk48umGpKOHomGkswKVm7RiPBBqlO2I6wFBbmSAqsvdDd1NHYGei2VdWiZ3UPBJYPaPqQOlroZqkLn3juuJTI4AO/vJ5LMPwOWEFMoHVqUZEHXDDqFoAAjkoLLSgflhG6+G5911K3sNja648RLRu8pys6gTMF+0S9ZKgeqbH/SJ8zCxU1EXt3KjdoLiwioNtv2V2Tp3oRfsPlfKfl7i4t0PZMENwEnVNQavCT7KZ34ibpFqYGcPkIUgHGbr/AikTQgXMeMfCrV/MWs0wWEmWwqD8vtcwGSo2k3dT83RbzuKSKNMsW1WLN0b+bdYZAYh7oDce4rehbGWFtrMxMSl2L7focRac4Ns7hpd+Ac/q841kescsMAtFPeJcxMans8nTylfhiB+1+e2Sikydy6+ZLT96GZLLDm3uSEwkxgNHtB2eAkv6dPk83rpN1DjLsj8pUu4eh6CuqwqohuILJCyQMDr/7V+wucSHeAqEx2RJx8o9cx7gkfCNnqCt9/UW96bbnnlLpYuUou5R6QyWMxqTSp+s8EgBtXNLaKcjt0gjmEhieAl55LmZn0ePxSJjYyF3AYO1tvxT4wWrLdiAA/Kj7mZcOdpisdjzIJdt9JgMjdmuCiJPvrujcj4rpEyhsBgDTe39eSEWe86yxsUewnacMClv/gmk/8p5sssyjETIEgSiGJxXG3DUcqlJ2nXFlgMojU9XEXir02GlxGzm1QE6USIJZ2d4HT0TAEq8qGssLoWQ+FKGHmbc9Qmm6Own0T6YVAzTJ+llj2dosTo5PT1pM06VyEgVcaREM2PLBZYju0NpRs14hYyQ24039URFa5pmnaYvcQvv3c3U/zlnAKgO6Cpyo3aby+Zrk9z6534YVIgPjNMF7Wp3MYchH+pxSA4ju8ItvGZhy4hof123yxf8Yh4LE5HjvTfG0h9gHqJRAoUH7k8PG1jElMCMGCSqGSIb3DQEJFTEWBBQQ121XP0QcupPfyzRfFXFWVYQnPjBBMDEwDQYJYIZIAWUDBAIBBQAEIG7DUtDht1xHJ77sCWv/Gu/2n+Ecv5Zfl3TTSYF5VzlfBAhEnK6i8ASSZwICCAA=\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\",\r\n    \"version\": {{domainVersion}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Domain that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"// pm.test(\"Update should fail when it doesn't exists\", function () {\r",
									"//     var result = pm.response.json();\r",
									"//     pm.expect(result.error).to.eql('Not Found')\r",
									"//     pm.expect(result.message).to.eql('Domain profile Domain Not Found')\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"Domain\",\r\n    \"domainSuffix\": \"test.com\",\r\n    \"provisioningCert\": \"test\",\r\n    \"provisioningCertStorageFormat\": \"raw\",\r\n    \"provisioningCertPassword\": \"P@ssw0rd\",\r\n    \"version\": \"751\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Domain",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/vprodemo",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"vprodemo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Domain when it doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"// pm.test(\"Deletion should fail when domain doesn't exists\", function () {\r",
									"//     var result = pm.response.json();\r",
									"//     pm.expect(result.error).to.eql('Not Found')\r",
									"//     pm.expect(result.message).to.eql(\"Domain profile vprodemo Not Found\")\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/vprodemo",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"vprodemo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Domain - domain name with different case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/domains/newdomain",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"domains",
								"newdomain"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Get All Profiles (Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {    \r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Get should find and return that it is unfound\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Error not found\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profile1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profile1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profile6\" without activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'Profile.Activation' Error:Field validation for 'Activation' failed on the 'required' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profile6\" without activation or amt password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.contain(\"'AMTPassword' failed on the 'required_if' tag\")\r",
									"    pm.expect(result.error).to.contain(\"'Activation' failed on the 'required' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profile6\" ccmactivate with both static and random amt passwords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'Profile.GenerateRandomPassword' Error:Field validation for 'GenerateRandomPassword' failed on the 'genpasswordwone' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profile6\" ccmactivate with invalid amtPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.contain(\"'AMTPassword' failed on the 'containsany' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profile6\" acmactivate without mebxPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'Profile.MEBXPassword' Error:Field validation for 'MEBXPassword' failed on the 'required_if=Activation acmactivate|required_if=GenerateRandomMEBxPassword false' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"activation\": \"acmactivate\",\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profile6\" acmactivate with invalid mebxPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'Profile.MEBXPassword' Error:Field validation for 'MEBXPassword' failed on the 'containsany' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123\",\r\n    \"activation\": \"acmactivate\",\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profile6\" - CCM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"versionVar = responseBody.version;\r",
									"pm.globals.set(\"profile6Version\", versionVar);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"localWifiSyncEnabled\": true\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CIRA Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var protocol = pm.environment.get(\"protocol\")\r",
									"var host = pm.environment.get(\"host\");\r",
									"\r",
									"const postRequest = {\r",
									"    url: protocol + '://' + host + '/api/v1/admin/ciraconfigs/ciraconfig3',\r",
									"    method: 'DELETE',\r",
									"};\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    if (error) {\r",
									"        console.log(error);\r",
									"    };\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"configName\": \"ciraconfig3\",\r\n\t\"mpsServerAddress\": \"192.168.8.50\",\r\n\t\"mpsPort\": 4433,\r\n\t\"username\": \"admin\",\r\n\t\"commonName\": \"192.168.8.50\",\r\n\t\"serverAddressFormat\": 3,\r\n\t\"authMethod\": 2,\r\n\t\"mpsRootCertificate\": \"rootcert\",\r\n\t\"proxyDetails\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ciraconfigs",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ciraconfigs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profile6\" - CCM invalid TLS & CIRA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'Profile.TLSMode' Error:Field validation for 'TLSMode' failed on the 'ciraortls' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile8\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"ciraConfigName\": \"ciraconfig3\",\r\n    \"tlsMode\": 4\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"testTLS\" - CCM with CIRA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"versionVar = responseBody.version;\r",
									"pm.globals.set(\"testTLSVersion\", versionVar);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"testTLS\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"ciraConfigName\": \"ciraconfig3\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profile6\" acmactivate with invalid signing authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'Profile.TLSSigningAuthority' Error:Field validation for 'TLSSigningAuthority' failed on the 'oneof' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"acmactivate\",\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": false,\r\n    \"generateRanodomMEBxPassword\": false,\r\n    \"tlsSigningAuthority\": \"BogusCA\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profileKVMOptions\" with valid kvm options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"versionVar = responseBody.version;\r",
									"pm.globals.set(\"profileKVMOptionsVersion\", versionVar);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql(\"profileKVMOptions\"),\r",
									"    pm.expect(result.userConsent).to.eql(\"All\")\r",
									"    pm.expect(result.iderEnabled).to.eql(false)\r",
									"    pm.expect(result.kvmEnabled).to.eql(true)\r",
									"    pm.expect(result.solEnabled).to.eql(false)\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileKVMOptions\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"userConsent\": \"All\",\r\n    \"iderEnabled\": false,\r\n    \"kvmEnabled\": true,\r\n    \"solEnabled\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profileKVMOptions\" with invalid kvm options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: json: cannot unmarshal string into Go struct field Profile.iderEnabled of type bool\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileKVMOptions\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"userConsent\": \"BadValue\",\r\n    \"iderEnabled\": \"foo\",\r\n    \"kvmEnabled\": \"foo\",\r\n    \"solEnabled\": \"foo\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profileTLS\" with valid tlsMode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Creation should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql(\"profileTLS\"),\r",
									"    pm.expect(result.amtPassword).to.eql(),\r",
									"    pm.expect(result.mebxPassword).to.eql(),\r",
									"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
									"    pm.expect(result.tags.length).to.equal(1)\r",
									"    pm.expect(result.tlsMode).to.equal(4)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileTLS\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"tlsMode\": 4\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile \"profileTLSinvalid\" with invalid tlsMode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'Profile.TLSMode' Error:Field validation for 'TLSMode' failed on the 'max' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profiletlsinvalid\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"tlsMode\": 5\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile with different case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should be two\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql(\"profile6\"),\r",
									"    pm.expect(result.amtPassword).to.eql(),\r",
									"    pm.expect(result.mebxPassword).to.eql(),\r",
									"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
									"    pm.expect(result.tags.length).to.equal(1)\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profile6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profile6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"headerEtag = pm.response.headers.get(\"ETag\");\r",
									"pm.globals.set(\"etag\", headerEtag);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {    \r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should equal 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(4);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles?$top=25&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles with invalid query params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: strconv.ParseInt: parsing \\\"ten\\\": invalid syntax\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles?$top=ten&$skip=zero&$count=notboolean",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles"
							],
							"query": [
								{
									"key": "$top",
									"value": "ten"
								},
								{
									"key": "$skip",
									"value": "zero"
								},
								{
									"key": "$count",
									"value": "notboolean"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles with count set to true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should equal 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.length).to.eql(4);\r",
									"    pm.expect(jsonData.totalCount).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles?$top=25&$skip=0&$count=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles with count set to false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should equal 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles?$top=25&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Duplicate Profile \"profile6\" - ACM",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.contain(\"unique constraint violation\")\r",
									" });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"activation\": \"acmactivate\",\r\n    \"dhcpEnabled\": false\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profile6\" with invalid activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Update (PATCH->edit) should not succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'Profile.AMTPassword' Error:Field validation for 'AMTPassword' failed on the 'required_if' tag\\nKey: 'Profile.Activation' Error:Field validation for 'Activation' failed on the 'oneof' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"activate\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"version\": \"{{profile6Version}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profile6\" with invalid amtPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Update (PATCH->edit) should not succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'Profile.AMTPassword' Error:Field validation for 'AMTPassword' failed on the 'containsany' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"amtPassword\": \"Intel123\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"version\": \"{{profile6Version}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profileKVMOptions\" with invalid kvm options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Update (PATCH->edit) should not succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: json: cannot unmarshal string into Go struct field Profile.iderEnabled of type bool\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileKVMOptions\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"userConsent\": \"BadValue\",\r\n    \"iderEnabled\": \"foo\",\r\n    \"kvmEnabled\": \"foo\",\r\n    \"solEnabled\": \"foo\",\r\n    \"version\": \"{{profileKVMOptionsVersion}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profileKVMOptions\" with valid kvm options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"versionVar = responseBody.version;\r",
									"pm.globals.set(\"profileKVMOptionsVersion\", versionVar);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Update (PATCH->edit) should succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.profileName).to.eql(\"profileKVMOptions\"),\r",
									"    pm.expect(result.userConsent).to.eql(\"All\")\r",
									"    pm.expect(result.iderEnabled).to.eql(false)\r",
									"    pm.expect(result.kvmEnabled).to.eql(true)\r",
									"    pm.expect(result.solEnabled).to.eql(false)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileKVMOptions\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"userConsent\": \"All\",\r\n    \"iderEnabled\": false,\r\n    \"kvmEnabled\": true,\r\n    \"solEnabled\": false,\r\n    \"version\": \"{{profileKVMOptionsVersion}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profiletlsinvalid\" with invalid tlsMode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Update (PATCH->edit) should not succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: json: cannot unmarshal string into Go struct field Profile.tlsMode of type int\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profiletlsinvalid\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"tlsMode\": \"invalid\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profile6\" ccmactivate with password combo false:missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Update (PATCH->edit) should not succeed\", function () {\r",
									"var result = pm.response.json();\r",
									"pm.expect(result.error).to.eql(\"Invalid input: Key: 'Profile.AMTPassword' Error:Field validation for 'AMTPassword' failed on the 'required_if' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"version\": \"{{profile6Version}} \"   \r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"testTLS\" ccmactivate from CIRA to TLS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"versionVar = responseBody.version;\r",
									"pm.globals.set(\"testTLSVersion\", versionVar);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should update profile from CIRA to TLS mode 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"testTLS\")\r",
									"    pm.expect(jsonData.activation).to.equal(\"ccmactivate\")    \r",
									"    pm.expect(jsonData.tags.length).to.equal(1)    \r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(true)\r",
									"    pm.expect(jsonData.tlsMode).to.eql(2)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"profileName\": \"testTLS\",\r\n        \"activation\": \"ccmactivate\",\r\n        \"ciraConfigName\": null,\r\n        \"generateRandomPassword\": true,\r\n        \"generateRandomMEBxPassword\": true,\r\n        \"tags\": [\r\n            \"tag1\"\r\n        ],\r\n        \"dhcpEnabled\": true,\r\n        \"tlsMode\": 2,\r\n        \"userConsent\": \"All\",\r\n        \"iderEnabled\": false,\r\n        \"kvmEnabled\": true,\r\n        \"solEnabled\": false,\r\n        \"tenantId\": \"\",\r\n        \"version\": \"{{testTLSVersion}}\",\r\n        \"wifiConfigs\": []\r\n    }"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"testTLS\" ccmactivate from TLS to TLS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"versionVar = responseBody.version;\r",
									"pm.globals.set(\"testTLSVersion\", versionVar);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should update profile with TLS mode 4\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"testTLS\")\r",
									"    pm.expect(jsonData.activation).to.equal(\"ccmactivate\")    \r",
									"    pm.expect(jsonData.tags.length).to.equal(1)    \r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(true)\r",
									"    pm.expect(jsonData.tlsMode).to.eql(4)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"profileName\": \"testTLS\",\r\n        \"activation\": \"ccmactivate\",\r\n        \"ciraConfigName\": null,\r\n        \"generateRandomPassword\": true,\r\n        \"generateRandomMEBxPassword\": true,\r\n        \"tags\": [\r\n            \"tag1\"\r\n        ],\r\n        \"dhcpEnabled\": true,\r\n        \"tlsMode\": 4,\r\n        \"userConsent\": \"All\",\r\n        \"iderEnabled\": false,\r\n        \"kvmEnabled\": true,\r\n        \"solEnabled\": false,\r\n        \"tenantId\": \"\",\r\n        \"version\": \"{{testTLSVersion}}\",\r\n        \"wifiConfigs\": []\r\n    }"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"testTLS\" ccmactivate from TLS to CIRA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"versionVar = responseBody.version;\r",
									"pm.globals.set(\"testTLSVersion\", versionVar);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Should update TLS profile to CIRA profile\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"testTLS\")\r",
									"    pm.expect(jsonData.activation).to.equal(\"ccmactivate\")    \r",
									"    pm.expect(jsonData.tags.length).to.equal(1)    \r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(true)\r",
									"    pm.expect(jsonData.ciraConfigName).to.eql(\"ciraconfig3\")  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n        \"profileName\": \"testTLS\",\r\n        \"activation\": \"ccmactivate\",\r\n        \"ciraConfigName\": \"ciraconfig3\",\r\n        \"generateRandomPassword\": true,\r\n        \"generateRandomMEBxPassword\": true,\r\n        \"tags\": [\r\n            \"tag1\"\r\n        ],\r\n        \"dhcpEnabled\": true,\r\n        \"tlsMode\": null,\r\n        \"userConsent\": \"All\",\r\n        \"iderEnabled\": false,\r\n        \"kvmEnabled\": true,\r\n        \"solEnabled\": false,\r\n        \"tenantId\": \"\",\r\n        \"version\": \"{{testTLSVersion}}\",\r\n        \"wifiConfigs\": []\r\n    }"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profile6\" with tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"versionVar = responseBody.version;\r",
									"pm.globals.set(\"profile6Version\", versionVar);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Result 1 should be equal to example\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(false)\r",
									"    pm.expect(jsonData.activation).to.equal(\"ccmactivate\")\r",
									"    pm.expect(jsonData.tags.length).to.equal(1)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag123\"],\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"version\": \"{{profile6Version}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profile6\" activation to acmactivate without mebx password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Update (PATCH->edit) should not succeed\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'Profile.AMTPassword' Error:Field validation for 'AMTPassword' failed on the 'required_if' tag\\nKey: 'Profile.MEBXPassword' Error:Field validation for 'MEBXPassword' failed on the 'required_if=Activation acmactivate|required_if=GenerateRandomMEBxPassword false' tag\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"acmactivate\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profile6\" with static mebx password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"versionVar = jsonData.version;\r",
									"pm.globals.set(\"profile6Version\", versionVar);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result 1 should be equal to example\", function () {\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.activation).to.equal(\"acmactivate\") \r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(false)\r",
									"    pm.expect(jsonData.tags.length).to.equal(1)     \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"mebxPassword\": \"P@ssw0rd\",\r\n    \"activation\": \"acmactivate\",\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"version\": \"{{profile6Version}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profile6\" with static amt password Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"versionVar = jsonData.version;\r",
									"pm.globals.set(\"profile6Version\", versionVar);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Update should succeed\", function () {\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.activation).to.equal(\"ccmactivate\")    \r",
									"    pm.expect(jsonData.tags.length).to.equal(1)    \r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(false)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"mebxPassword\": \"P@ssw0rd\",\r\n    \"amtPassword\": \"P@ssw0rd\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"version\": \"{{profile6Version}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profile6\" with ipSyncEnabled false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"versionVar = jsonData.version;\r",
									"pm.globals.set(\"profile6Version\", versionVar);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Update should succeed\", function () {\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(false)\r",
									"    pm.expect(jsonData.ipSyncEnabled).to.equal(false)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"mebxPassword\": \"P@ssw0rd\",\r\n    \"amtPassword\": \"P@ssw0rd\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"ipSyncEnabled\": false,\r\n    \"version\": \"{{profile6Version}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profile6\" with ipSyncEnabled true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"versionVar = jsonData.version;\r",
									"pm.globals.set(\"profile6Version\", versionVar);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Update should succeed\", function () {\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(false)\r",
									"    pm.expect(jsonData.ipSyncEnabled).to.equal(false)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"mebxPassword\": \"P@ssw0rd\",\r\n    \"amtPassword\": \"P@ssw0rd\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"ipSyncEnabled\": false,\r\n    \"version\": \"{{profile6Version}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile \"profile6\" with localWifiSyncEnabled false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"versionVar = jsonData.version;\r",
									"pm.globals.set(\"profile6Version\", versionVar);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Update should succeed\", function () {\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profile6\")\r",
									"    pm.expect(jsonData.dhcpEnabled).to.equal(false)\r",
									"    pm.expect(jsonData.localWifiSyncEnabled).to.equal(false)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profile6\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"mebxPassword\": \"P@ssw0rd\",\r\n    \"amtPassword\": \"P@ssw0rd\",\r\n    \"generateRandomPassword\": false,\r\n    \"generateRandomMEBxPassword\": false,\r\n    \"ipSyncEnabled\": false,\r\n    \"localWifiSyncEnabled\": false,\r\n    \"version\": \"{{profile6Version}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Profile \"testTLS\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/testTLS",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"testTLS"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Profile \"profileKVMOptions\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-RPS-API-Key",
								"value": "APIKEYFORRPS123!",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profileKVMOptions",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profileKVMOptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Profile \"profile6\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profile6",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profile6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Profile \"profileTLS\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profileTLS",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profileTLS"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Profile \"profileNA\" - Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Creation should fail without activation\", function () {\r",
									"    var result = pm.response.json();\r",
									"    pm.expect(result.error).to.eql(\"Error not found\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/profileNA",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"profiles",
								"profileNA"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Integration",
			"item": [
				{
					"name": "AMT Profiles w/ WIFI Profiles",
					"item": [
						{
							"name": "Create Wireless Profile(home)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request should return profile just created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.profileName).to.eql(\"home\");\r",
											"    pm.expect(jsonData.authenticationMethod).to.eql(4);\r",
											"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
											"    pm.expect(jsonData.ssid).to.eql(\"test\");\r",
											"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
											"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
											"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"home\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wireless Profile(office)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request should return profile just created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.profileName).to.eql(\"office\");\r",
											"    pm.expect(jsonData.authenticationMethod).to.eql(4);\r",
											"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
											"    pm.expect(jsonData.ssid).to.eql(\"admin\");\r",
											"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
											"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
											"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"office\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"admin\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with DHCP enabled false and Wifi configs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.contain(\"'WiFiConfigs' failed on the 'excluded_if' tag\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with priority greater than 255 for wifiConfig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail without activation\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'Profile.WiFiConfigs[0].Priority' Error:Field validation for 'Priority' failed on the 'max' tag\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 355,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with priority less than 1 for wifiConfig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.contain(\"'Priority' failed on the 'min' tag\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": -1,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with wifiConfigs and without DHCP enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.contain(\"'WiFiConfigs' failed on the 'excluded_if' tag\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT Profile with wifiConfigs that does not exist in db",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).contains(\"Invalid input\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"test\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var result = pm.response.json();\r",
											"pm.globals.set(\"wifiProfileVersion\", result.version);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.match(/^.+$/);\r",
											"    pm.expect(result.mebxPassword).to.match(/^.+$/);\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.dhcpEnabled).to.equal(true)\r",
											"    pm.expect(result.wifiConfigs.length).to.equal(2)\r",
											"    pm.expect(result.wifiConfigs[0].priority).to.equal(1)\r",
											"    pm.expect(result.wifiConfigs[0].profileName).to.equal(\"home\")\r",
											"    pm.expect(result.wifiConfigs[1].priority).to.equal(2)\r",
											"    pm.expect(result.wifiConfigs[1].profileName).to.equal(\"office\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"P@ssw0rd\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"acm\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET AMT Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var result = pm.response.json();\r",
											"pm.globals.set(\"wifiProfileVersion\", result.version);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Result should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.match(/^.+$/);\r",
											"    pm.expect(result.mebxPassword).to.match(/^.+$/);\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.dhcpEnabled).to.equal(true)\r",
											"    pm.expect(result.wifiConfigs.length).to.equal(2)\r",
											"    pm.expect(result.wifiConfigs[0].priority).to.equal(1)\r",
											"    pm.expect(result.wifiConfigs[0].profileName).to.equal(\"home\")\r",
											"    pm.expect(result.wifiConfigs[1].priority).to.equal(2)\r",
											"    pm.expect(result.wifiConfigs[1].profileName).to.equal(\"office\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/wifi-profile",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										"wifi-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AMT Profile with wifiConfigs that does not exist in db",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).contains(\"Invalid input\")\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"test\"\r\n        }\r\n    ],\r\n    \"version\": \"{{wifiProfileVersion}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with DHCP enabled false and Wifi configs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.contain(\"'WiFiConfigs' failed on the 'excluded_if' tag\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with priority greater than 255 for wifiConfig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.contain(\"'Priority' failed on the 'max' tag\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 355,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT profile with priority less than 1 for wifiConfig",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.contain(\"'Priority' failed on the 'min' tag\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home2\"\r\n        },\r\n        {\r\n            \"priority\": -1,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AMT Profile - DHCP enabled to false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var result = pm.response.json();\r",
											"pm.globals.set(\"wifiProfileVersion\", result.version);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.match(/^.+$/);\r",
											"    pm.expect(result.mebxPassword).to.match(/^.+$/);\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.dhcpEnabled).to.equal(false)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n   \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"version\": \"{{wifiProfileVersion}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AMT Profile - with wificonfigs and without DHCP enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Creation should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.contain(\"'WiFiConfigs' failed on the 'excluded_if' tag\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n     \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AMT Profile - DHCP enabled to true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var result = pm.response.json();\r",
											"pm.globals.set(\"wifiProfileVersion\", result.version);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.dhcpEnabled).to.equal(true)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"mebxPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"version\": \"{{wifiProfileVersion}}\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wireless Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request should return profile just created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.profileName).to.eql(\"business\");\r",
											"    pm.expect(jsonData.authenticationMethod).to.eql(4);\r",
											"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
											"    pm.expect(jsonData.ssid).to.eql(\"admin\");\r",
											"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
											"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
											"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"business\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"admin\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update AMT Profile - append wifi configs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var result = pm.response.json();\r",
											"pm.globals.set(\"wifiProfileVersion\", result.version);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.match(/^.+$/);\r",
											"    pm.expect(result.mebxPassword).to.match(/^.+$/);\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.dhcpEnabled).to.equal(true)\r",
											"    pm.expect(result.wifiConfigs.length).to.equal(3)\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile\",\r\n    \"amtPassword\": \"Intel123!\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"dhcpEnabled\": true,\r\n    \"version\": \"{{wifiProfileVersion}}\",\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        },\r\n        {\r\n            \"priority\": 3,\r\n            \"profileName\": \"business\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AMT Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"wifi-profile2\"),\r",
											"    pm.expect(result.activation).to.eql(\"acmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(2)\r",
											"    pm.expect(result.wifiConfigs.length).to.equal(3)\r",
											"    pm.expect(result.wifiConfigs[0].priority).to.equal(1)\r",
											"    pm.expect(result.wifiConfigs[0].profileName).to.equal(\"home\")\r",
											"    pm.expect(result.wifiConfigs[1].priority).to.equal(2)\r",
											"    pm.expect(result.wifiConfigs[1].profileName).to.equal(\"office\")\r",
											"     pm.expect(result.wifiConfigs[2].priority).to.equal(3)\r",
											"    pm.expect(result.wifiConfigs[2].profileName).to.equal(\"business\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"wifi-profile2\",\r\n    \"activation\": \"acmactivate\",\r\n    \"amtPassword\": \"P@ssw0rd\",\r\n    \"mebxPassword\": \"P@ssw0rd\",\r\n    \"tags\": [\"acm\", \"random password\"],\r\n    \"dhcpEnabled\": true,\r\n    \"wifiConfigs\": [\r\n        {\r\n            \"priority\": 1,\r\n            \"profileName\": \"home\"\r\n        },\r\n        {\r\n            \"priority\": 2,\r\n            \"profileName\": \"office\"\r\n        },\r\n        {\r\n            \"priority\": 3,\r\n            \"profileName\": \"business\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GET ALL AMT Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Result should contain two profiles\", function () {\r",
											"    var result = pm.response.json();\r",
											"     pm.expect(result.length).to.equal(2)\r",
											"});\r",
											"\r",
											"pm.test(\"Profile one\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result[0].profileName).to.eql(\"wifi-profile\"),\r",
											"    pm.expect(result.amtPassword).to.match(/^.+$/);\r",
											"    pm.expect(result.mebxPassword).to.match(/^.+$/);\r",
											"    pm.expect(result[0].activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result[0].tags.length).to.equal(1)\r",
											"    pm.expect(result[0].wifiConfigs.length).to.equal(3)\r",
											"});\r",
											"\r",
											"pm.test(\"Profile two\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result[1].profileName).to.eql(\"wifi-profile2\"),\r",
											"    pm.expect(result[1].activation).to.eql(\"acmactivate\")\r",
											"    pm.expect(result[1].tags.length).to.equal(2)\r",
											"    console.log(result[1].wifiConfigs.length);\r",
											"    pm.expect(result[1].wifiConfigs.length).to.equal(3)\r",
											"    pm.expect(result[1].wifiConfigs[0].priority).to.equal(1)\r",
											"    pm.expect(result[1].wifiConfigs[0].profileName).to.equal(\"home\")\r",
											"    pm.expect(result[1].wifiConfigs[1].priority).to.equal(2)\r",
											"    pm.expect(result[1].wifiConfigs[1].profileName).to.equal(\"office\")\r",
											"    pm.expect(result[1].wifiConfigs[2].priority).to.equal(3)\r",
											"    pm.expect(result[1].wifiConfigs[2].profileName).to.equal(\"business\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Wireless Profile associated with AMT Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"deletion should fail\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).contains(\"foreign key violation\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/office",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										"office"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/wifi-profile2",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										"wifi-profile2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-RPS-API-Key",
										"value": "APIKEYFORRPS123!",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/wifi-profile",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										"wifi-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Wireless Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/home",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										"home"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Wireless Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/office",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										"office"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Wireless Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/business",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										"business"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AMT Profiles w/ 8021x Profiles",
					"item": [
						{
							"name": "Create wired 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request should return profile just created\", function () {\r",
											"    pm.expect(jsonData.profileName).to.eql(\"ieee8021xProfileWired\");\r",
											"    pm.expect(jsonData.authenticationProtocol).to.eql(0);\r",
											"    pm.expect(jsonData.pxeTimeout).to.eql(120);\r",
											"    pm.expect(jsonData.wiredInterface).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"ieee8021xProfileWired\",\r\n    \"authenticationProtocol\": 0,\r\n    \"pxeTimeout\": 120,\r\n    \"wiredInterface\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ieee8021xconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create 2nd wired 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request should return profile just created\", function () {\r",
											"    pm.expect(jsonData.profileName).to.eql(\"extraProf\");\r",
											"    pm.expect(jsonData.authenticationProtocol).to.eql(0);\r",
											"    pm.expect(jsonData.pxeTimeout).to.eql(120);\r",
											"    pm.expect(jsonData.wiredInterface).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"extraProf\",\r\n    \"authenticationProtocol\": 0,\r\n    \"pxeTimeout\": 120,\r\n    \"wiredInterface\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ieee8021xconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create wireless 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request should return profile just created\", function () {\r",
											"    var profile = pm.environment.get(\"ieee8021xProfileWireless\")\r",
											"    pm.expect(jsonData.profileName).to.eql(profile);\r",
											"    pm.expect(jsonData.authenticationProtocol).to.eql(0);\r",
											"    pm.expect(jsonData.pxeTimeout).to.eql(120);\r",
											"    pm.expect(jsonData.wiredInterface).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"ieee8021xProfileWireless\",\r\n    \"authenticationProtocol\": 0,\r\n    \"pxeTimeout\": 120,\r\n    \"wiredInterface\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ieee8021xconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Profile w/ wrong interface 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Request should return 8021x profile is for wireless interfaces\", function () {\r",
											"     var result = pm.response.json();\r",
											"    pm.expect(result.error).contains(\"Invalid input: Wired interface is required\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"test8021x\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"ciraConfigName\": null,\r\n    \"ieee8021xProfileName\": \"{{ieee8021xProfileWireless}}\",\r\n    \"tlsMode\": null\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Profile w/ nonexistent 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var profName = pm.environment.get(\"badProf\")\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Request should return 8021x profile can not be specified\", function () {\r",
											"     var result = pm.response.json();\r",
											"    pm.expect(result.error).to.contain(\"Invalid input: IEEE profile is not found in the database\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"test8021x\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"ciraConfigName\": null,\r\n    \"ieee8021xProfileName\": \"{{badProf}}\",\r\n    \"tlsMode\": null\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Profile - CCM with 8021x",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"test8021x\"),\r",
											"    pm.expect(result.ciraConfigName).to.eql()\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.iderEnabled).to.eql(false)\r",
											"    pm.expect(result.kvmEnabled).to.eql(false)\r",
											"    pm.expect(result.solEnabled).to.eql(false)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"test8021x\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"ciraConfigName\": null,\r\n    \"ieee8021xProfileName\": \"ieee8021xProfileWired\",\r\n    \"tlsMode\": null\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update Profile - CCM with 8021x",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Creation should succeed\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.profileName).to.eql(\"test8021x\"),\r",
											"    pm.expect(result.amtPassword).to.eql(),\r",
											"    pm.expect(result.mebxPassword).to.eql(),\r",
											"    pm.expect(result.activation).to.eql(\"ccmactivate\")\r",
											"    pm.expect(result.tags.length).to.equal(1)\r",
											"    pm.expect(result.iderEnabled).to.eql(false)\r",
											"    pm.expect(result.kvmEnabled).to.eql(false)\r",
											"    pm.expect(result.solEnabled).to.eql(false)\r",
											"    pm.expect(result.ieee8021xProfileName).to.eql(\"extraProf\")\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"test8021x\",\r\n    \"activation\": \"ccmactivate\",\r\n    \"tags\": [\"tag1\"],\r\n    \"dhcpEnabled\": false,\r\n    \"generateRandomPassword\": true,\r\n    \"generateRandomMEBxPassword\": true,\r\n    \"ciraConfigName\": null,\r\n    \"ieee8021xProfileName\": \"extraProf\",\r\n    \"tlsMode\": null,\r\n    \"version\": \"{{recordVersion}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/profiles/test8021x",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"profiles",
										"test8021x"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete wired 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/ieee8021xProfileWired",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ieee8021xconfigs",
										"ieee8021xProfileWired"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete 2nd wired 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/extraProf",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ieee8021xconfigs",
										"extraProf"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete wireless 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/ieee8021xProfileWireless",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ieee8021xconfigs",
										"ieee8021xProfileWireless"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "WIFI Profiles w/ 8021x Profiles",
					"item": [
						{
							"name": "Create wired 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request should return profile just created\", function () {\r",
											"    pm.expect(jsonData.profileName).to.eql(\"ieee8021xProfileWired\");\r",
											"    pm.expect(jsonData.authenticationProtocol).to.eql(0);\r",
											"    pm.expect(jsonData.pxeTimeout).to.eql(120);\r",
											"    pm.expect(jsonData.wiredInterface).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"ieee8021xProfileWired\",\r\n    \"authenticationProtocol\": 0,\r\n    \"pxeTimeout\": 120,\r\n    \"wiredInterface\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ieee8021xconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create wireless 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request should return profile just created\", function () {\r",
											"    pm.expect(jsonData.profileName).to.eql(\"ieee8021xProfileWireless\");\r",
											"    pm.expect(jsonData.authenticationProtocol).to.eql(0);\r",
											"    pm.expect(jsonData.pxeTimeout).to.eql(120);\r",
											"    pm.expect(jsonData.wiredInterface).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"ieee8021xProfileWireless\",\r\n    \"authenticationProtocol\": 0,\r\n    \"pxeTimeout\": 120,\r\n    \"wiredInterface\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ieee8021xconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create WIFI Profile w/ missing 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Request should return 8021x profile is required\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'WirelessConfig.AuthenticationMethod' Error:Field validation for 'AuthenticationMethod' failed on the 'authforieee8021x' tag\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 5,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create WIFI Profile w/ errant 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Request should return 8021x profile can not be specified\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.eql(\"Invalid input: Key: 'WirelessConfig.AuthenticationMethod' Error:Field validation for 'AuthenticationMethod' failed on the 'authforieee8021x' tag\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16],\r\n    \"ieee8021xProfileName\": \"errant\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create WIFI Profile w/ nonexistent 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var profName = pm.environment.get(\"badProf\")\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Request should return 8021x profile can not be specified\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.eql(\"Error not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 5,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16],\r\n    \"ieee8021xProfileName\": \"{{badProf}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create WIFI Profile w/ wrong interface 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Request should return 8021x profile is for wired interfaces\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.eql(\"Error not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 5,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16],\r\n    \"ieee8021xProfileName\": \"{{ieee8021xProfileWired}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Create WIFI Profile w/ 8021x",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Request should return profile just created\", function () {\r",
											"    pm.expect(jsonData.profileName).to.eql(\"P1\");\r",
											"    pm.expect(jsonData.authenticationMethod).to.eql(5);\r",
											"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
											"    pm.expect(jsonData.ssid).to.eql(\"test\");\r",
											"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
											"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
											"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 5,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16],\r\n    \"ieee8021xProfileName\": \"{{ieee8021xProfileWireless}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update WIFI Profile w/ wrong interface 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.globals.set(\"recordVersion\", jsonData.version);\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Request should return 8021x profile can not be specified\", function () {\r",
											"    var result = pm.response.json();\r",
											"    pm.expect(result.error).to.eql(\"Error not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 5,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16],\r\n    \"ieee8021xProfileName\": \"{{ieee8021xProfileWired}}\",\r\n    \"version\": \"{{recordVersion}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/P1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"wirelessconfigs",
										"P1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete wired 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/ieee8021xProfileWired",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ieee8021xconfigs",
										"ieee8021xProfileWired"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete wireless 8021x Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/ieee8021xProfileWireless",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"v1",
										"admin",
										"ieee8021xconfigs",
										"ieee8021xProfileWireless"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Wireless",
			"item": [
				{
					"name": "All profiles (Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "A Specific Profile doesn't exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"// pm.test(\"Result should contain an error and message\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
									"//     pm.expect(jsonData.message).to.eql(\"Wireless profile sampleProfile Not Found\");\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/sampleProfile",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								"sampleProfile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with invalid auth method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'AuthenticationMethod' failed on the 'oneof' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 10,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with invalid encryption method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'EncryptionMethod' failed on the 'oneof' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 6,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with SSID length greater than 32",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'SSID' failed on the 'max' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"wirelessProfile1234512345123456789\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with psk pass phrase less than 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'PSKPassphrase' failed on the 'min' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Inte123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile with psk pass phrase greater than 63",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'PSKPassphrase' failed on the 'max' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"recordVersion\", jsonData.version);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Request should return profile just created\", function () {\r",
									"    pm.expect(jsonData.profileName).to.eql(\"P1\");\r",
									"    pm.expect(jsonData.authenticationMethod).to.eql(4);\r",
									"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
									"    pm.expect(jsonData.ssid).to.eql(\"test\");\r",
									"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
									"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
									"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Duplicate Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"// pm.test(\"Request should return an error message\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.error).to.eql(\"Unique key violation\");\r",
									"//     pm.expect(jsonData.message).to.eql(\"Wireless profile P1 already exists\");\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "A Specific Profile that exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result should wifi profile\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"P1\");\r",
									"    pm.expect(jsonData.authenticationMethod).to.eql(4);\r",
									"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
									"    pm.expect(jsonData.ssid).to.eql(\"test\");\r",
									"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
									"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
									"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
									"    pm.expect(jsonData.pskPassphrase).to.eql();\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/P1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								"P1"
							]
						}
					},
					"response": []
				},
				{
					"name": "All profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"headerEtag = pm.response.headers.get(\"ETag\");\r",
									"pm.globals.set(\"etag\", headerEtag);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);    \r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs?$top=25&$skip=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All profiles with invalid query params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// pm.test(\"Request should fail with invalid query string\", function () {\r",
									"//     var errors = pm.response.json().errors;\r",
									"//     pm.expect(errors[0].path).to.equal('$top');\r",
									"//     pm.expect(errors[0].msg).to.equal('The number of items to return should be a positive integer');\r",
									"\r",
									"//     pm.expect(errors[1].path).to.equal('$skip');\r",
									"//     pm.expect(errors[1].msg).to.equal('The number of items to skip before starting to collect the result set should be a positive integer');\r",
									"    \r",
									"//     pm.expect(errors[2].path).to.equal('$count');\r",
									"//     pm.expect(errors[2].msg).to.equal('To return total number of records in result set should be boolean');\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs?$top=ten&$skip=zero&$count=notboolean",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "ten"
								},
								{
									"key": "$skip",
									"value": "zero"
								},
								{
									"key": "$count",
									"value": "notboolean"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All profiles with count set to true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.length).to.eql(1);\r",
									"    pm.expect(jsonData.totalCount).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs?$top=25&$skip=0&$count=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All profiles with count set to false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs?$top=25&$skip=0&$count=false",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs"
							],
							"query": [
								{
									"key": "$top",
									"value": "25"
								},
								{
									"key": "$skip",
									"value": "0"
								},
								{
									"key": "$count",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"recordVersion\", jsonData.version);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request should return profile just created\", function () {\r",
									"    pm.expect(jsonData.profileName).to.eql(\"P1\");\r",
									"    pm.expect(jsonData.authenticationMethod).to.eql(4);\r",
									"    pm.expect(jsonData.encryptionMethod).to.eql(4);\r",
									"    pm.expect(jsonData.ssid).to.eql(\"test1\");\r",
									"    pm.expect(jsonData.linkPolicy.length).to.eql(2);\r",
									"    pm.expect(jsonData.linkPolicy[0]).to.eql(14);\r",
									"    pm.expect(jsonData.linkPolicy[1]).to.eql(16);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"version\": \"{{recordVersion}}\",\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test1\",\r\n    \"pskPassphrase\": \"Intel@123!\",\r\n    \"linkPolicy\": [14,16]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with invalid encryption method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"recordVersion\", jsonData.version);\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'EncryptionMethod' failed on the 'oneof' tag\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 6,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16],\r\n    \"version\": \"{{recordVersion}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with invalid auth method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'AuthenticationMethod' failed on the 'oneof' tag\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 10,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16],\r\n    \"version\": \"{{recordVersion}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with SSID length greater than 32",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'SSID' failed on the 'max' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"wirelessProfile1234512345123456789\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16],\r\n    \"version\": \"{{recordVersion}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with psk pass phrase less than 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'PSKPassphrase' failed on the 'min' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Inte123\",\r\n    \"linkPolicy\": [14,16],\r\n    \"version\": \"{{recordVersion}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile with psk pass phrase greater than 63",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'PSKPassphrase' failed on the 'max' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P1\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!Intel@123!\",\r\n    \"linkPolicy\": [14,16],\r\n    \"version\": \"{{recordVersion}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile that does not exits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"// pm.test(\"Result should contain an error and message\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
									"//     pm.expect(jsonData.message).to.eql(\"Wireless profile P12 Not Found\");\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"P12\",\r\n    \"authenticationMethod\": 4,\r\n    \"encryptionMethod\": 4,\r\n    \"ssid\": \"test\",\r\n    \"priority\": 1,\r\n    \"pskPassphrase\": \"Intel@123\",\r\n    \"linkPolicy\": [14,16],\r\n    \"version\": \"{{recordVersion}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/P1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								"P1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Profile that doesn't exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"// pm.test(\"Result should wifi profile\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
									"//     pm.expect(jsonData.message).to.eql(\"Wireless profile P11 Not Found\");\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/wirelessconfigs/P11",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"wirelessconfigs",
								"P11"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "IEEE8021xConfigs",
			"item": [
				{
					"name": "All 8021x Profiles (Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result length should be equal to zero\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var protocol = pm.environment.get(\"protocol\")\r",
									"var host = pm.environment.get(\"host\");\r",
									"var profile = pm.environment.get(\"ieee8021xProfileWired\");\r",
									"const postRequest = {\r",
									"    url: protocol + '://' + host + '/api/v1/admin/ieee8021xconfigs/' + profile,\r",
									"    method: 'DELETE',\r",
									"};\r",
									"pm.sendRequest(postRequest, (error, response) => {\r",
									"    if (error) {\r",
									"        console.log(error);\r",
									"    };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 8021x Profile - Blank Profile Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'ProfileName' failed on the 'required' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"\",\r\n    \"authenticationProtocol\": 0,\r\n    \"pxeTimeout\": 120,\r\n    \"wiredInterface\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 8021x Profile - Invalid Profile Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'ProfileName' failed on the 'alphanum' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"test_#\",\r\n    \"authenticationProtocol\": 0,\r\n    \"pxeTimeout\": 120,\r\n    \"wiredInterface\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 8021x Profile - Profile Name Too Long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'ProfileName' failed on the 'max' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"test012345678901234567890123456789\",\r\n    \"authenticationProtocol\": 0,\r\n    \"pxeTimeout\": 120,\r\n    \"wiredInterface\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 8021x Profile - Invalid Wired Auth Protocol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"Invalid input: Key: 'IEEE8021xConfig.AuthenticationProtocol' Error:Field validation for 'AuthenticationProtocol' failed on the 'matchAuthProtocol' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileName\",\r\n    \"authenticationProtocol\": 1,\r\n    \"pxeTimeout\": 120,\r\n    \"wiredInterface\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 8021x Profile - PXE Timeout Out of Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'PXETimeout' failed on the 'lte' tag\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileName\",\r\n    \"authenticationProtocol\": 0,\r\n    \"pxeTimeout\": 86401,\r\n    \"wiredInterface\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 8021x Profile - Invalid PXE Timeout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"// pm.test(\"Result should contain an error and message\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.errors[0].msg).to.eql(\"PXE Timeout must be number\");\r",
									"//     pm.expect(jsonData.errors[0].value).to.eql(\"120\");\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"{{ieee8021xProfileWired}}\",\r\n    \"authenticationProtocol\": 0,\r\n    \"pxeTimeout\": \"120\",\r\n    \"wiredInterface\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 8021x Profile - No PXE Timeout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Result should contain an error and message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.contain(\"'PXETimeout' failed on the 'required' tag\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileName\",\r\n    \"authenticationProtocol\": 0,\r\n    \"wiredInterface\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 8021x Profile - Invalid Wireless Auth Protocol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"// pm.test(\"Result should contain an error and message\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.errors[0].value).to.eql(3);\r",
									"//     pm.expect(jsonData.errors[0].msg).to.eql(\"Authentication protocol must be one of 0:EAP-TLS, 2:PEAPv0/EAP-MSCHAPv2\");\r",
									"//     pm.expect(jsonData.errors[0].path).to.eql(\"authenticationProtocol\");\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileName\",\r\n    \"authenticationProtocol\": 3,\r\n    \"pxeTimeout\": 120,\r\n    \"wiredInterface\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 8021x Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"recordVersion\", jsonData.version);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Request should return profile just created\", function () {\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profileName\");\r",
									"    pm.expect(jsonData.authenticationProtocol).to.eql(0);\r",
									"    pm.expect(jsonData.pxeTimeout).to.eql(120);\r",
									"    pm.expect(jsonData.wiredInterface).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileName\",\r\n    \"authenticationProtocol\": 0,\r\n    \"pxeTimeout\": 120,\r\n    \"wiredInterface\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Duplicate 8021x Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"// pm.test(\"Request should return an error message\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     var profile = pm.environment.get(\"ieee8021xProfileWired\")\r",
									"//     pm.expect(jsonData.error).to.eql(\"Unique key violation\");\r",
									"//     pm.expect(jsonData.message).to.eql(\"802.1x config: \" + profile + \" already exists\");\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileName\",\r\n    \"authenticationProtocol\": 10,\r\n    \"pxeTimeout\": 0,\r\n    \"wiredInterface\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific 8021xProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Result should contain 802.1x profile\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profileName\");\r",
									"    pm.expect(jsonData.authenticationProtocol).to.eql(0);\r",
									"    pm.expect(jsonData.pxeTimeout).to.eql(120);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/profileName",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								"profileName"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific 8021xProfile - Which doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"// pm.test(\"Result should contain an error and message\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"//     pm.expect(jsonData.error).to.eql(\"Not Found\");\r",
									"//     pm.expect(jsonData.message).to.eql(\"802.1x profile testProfile Not Found\");\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/testProfile",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								"testProfile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update 8021x Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"recordVersion\", jsonData.version);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Request should return profile just created\", function () {\r",
									"    pm.expect(jsonData.profileName).to.eql(\"profileName\");\r",
									"    pm.expect(jsonData.authenticationProtocol).to.eql(5);\r",
									"    pm.expect(jsonData.pxeTimeout).to.eql(0);\r",
									"    pm.expect(jsonData.wiredInterface).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"profileName\": \"profileName\",\r\n    \"authenticationProtocol\": 5,\r\n    \"pxeTimeout\": 0,\r\n    \"wiredInterface\": true,\r\n    \"version\": \"{{recordVersion}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete 8021x Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}/api/v1/admin/ieee8021xconfigs/profileName",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"ieee8021xconfigs",
								"profileName"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}