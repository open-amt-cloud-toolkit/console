// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/profilewificonfigs/interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/profilewificonfigs/interfaces.go -package profilewificonfigs_test
//

// Package profilewificonfigs_test is a generated GoMock package.
package profilewificonfigs_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/open-amt-cloud-toolkit/console/internal/entity"
	dto "github.com/open-amt-cloud-toolkit/console/internal/entity/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteByProfileName mocks base method.
func (m *MockRepository) DeleteByProfileName(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProfileName", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByProfileName indicates an expected call of DeleteByProfileName.
func (mr *MockRepositoryMockRecorder) DeleteByProfileName(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProfileName", reflect.TypeOf((*MockRepository)(nil).DeleteByProfileName), ctx, profileName, tenantID)
}

// GetByProfileName mocks base method.
func (m *MockRepository) GetByProfileName(ctx context.Context, profileName, tenantID string) ([]entity.ProfileWiFiConfigs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProfileName", ctx, profileName, tenantID)
	ret0, _ := ret[0].([]entity.ProfileWiFiConfigs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProfileName indicates an expected call of GetByProfileName.
func (mr *MockRepositoryMockRecorder) GetByProfileName(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProfileName", reflect.TypeOf((*MockRepository)(nil).GetByProfileName), ctx, profileName, tenantID)
}

// Insert mocks base method.
func (m *MockRepository) Insert(ctx context.Context, p *entity.ProfileWiFiConfigs) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockRepositoryMockRecorder) Insert(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepository)(nil).Insert), ctx, p)
}

// MockFeature is a mock of Feature interface.
type MockFeature struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureMockRecorder
}

// MockFeatureMockRecorder is the mock recorder for MockFeature.
type MockFeatureMockRecorder struct {
	mock *MockFeature
}

// NewMockFeature creates a new mock instance.
func NewMockFeature(ctrl *gomock.Controller) *MockFeature {
	mock := &MockFeature{ctrl: ctrl}
	mock.recorder = &MockFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeature) EXPECT() *MockFeatureMockRecorder {
	return m.recorder
}

// DeleteByProfileName mocks base method.
func (m *MockFeature) DeleteByProfileName(ctx context.Context, profileName, tenantID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProfileName", ctx, profileName, tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByProfileName indicates an expected call of DeleteByProfileName.
func (mr *MockFeatureMockRecorder) DeleteByProfileName(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProfileName", reflect.TypeOf((*MockFeature)(nil).DeleteByProfileName), ctx, profileName, tenantID)
}

// GetByProfileName mocks base method.
func (m *MockFeature) GetByProfileName(ctx context.Context, profileName, tenantID string) ([]dto.ProfileWiFiConfigs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProfileName", ctx, profileName, tenantID)
	ret0, _ := ret[0].([]dto.ProfileWiFiConfigs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProfileName indicates an expected call of GetByProfileName.
func (mr *MockFeatureMockRecorder) GetByProfileName(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProfileName", reflect.TypeOf((*MockFeature)(nil).GetByProfileName), ctx, profileName, tenantID)
}

// Insert mocks base method.
func (m *MockFeature) Insert(ctx context.Context, p *dto.ProfileWiFiConfigs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockFeatureMockRecorder) Insert(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFeature)(nil).Insert), ctx, p)
}
