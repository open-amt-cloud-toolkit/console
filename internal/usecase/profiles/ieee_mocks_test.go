// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/ieee8021xconfigs/interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/ieee8021xconfigs/interfaces.go -package profiles_test -mock_names Repository=MockIEEERepository,Feature=MockIEEEFeature
//

// Package profiles_test is a generated GoMock package.
package profiles_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/open-amt-cloud-toolkit/console/internal/entity"
	dto "github.com/open-amt-cloud-toolkit/console/internal/entity/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIEEERepository is a mock of Repository interface.
type MockIEEERepository struct {
	ctrl     *gomock.Controller
	recorder *MockIEEERepositoryMockRecorder
}

// MockIEEERepositoryMockRecorder is the mock recorder for MockIEEERepository.
type MockIEEERepositoryMockRecorder struct {
	mock *MockIEEERepository
}

// NewMockIEEERepository creates a new mock instance.
func NewMockIEEERepository(ctrl *gomock.Controller) *MockIEEERepository {
	mock := &MockIEEERepository{ctrl: ctrl}
	mock.recorder = &MockIEEERepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEEERepository) EXPECT() *MockIEEERepositoryMockRecorder {
	return m.recorder
}

// CheckProfileExists mocks base method.
func (m *MockIEEERepository) CheckProfileExists(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProfileExists", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProfileExists indicates an expected call of CheckProfileExists.
func (mr *MockIEEERepositoryMockRecorder) CheckProfileExists(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProfileExists", reflect.TypeOf((*MockIEEERepository)(nil).CheckProfileExists), ctx, profileName, tenantID)
}

// Delete mocks base method.
func (m *MockIEEERepository) Delete(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIEEERepositoryMockRecorder) Delete(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIEEERepository)(nil).Delete), ctx, profileName, tenantID)
}

// Get mocks base method.
func (m *MockIEEERepository) Get(ctx context.Context, top, skip int, tenantID string) ([]entity.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]entity.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIEEERepositoryMockRecorder) Get(ctx, top, skip, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIEEERepository)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockIEEERepository) GetByName(ctx context.Context, profileName, tenantID string) (*entity.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, profileName, tenantID)
	ret0, _ := ret[0].(*entity.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIEEERepositoryMockRecorder) GetByName(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIEEERepository)(nil).GetByName), ctx, profileName, tenantID)
}

// GetCount mocks base method.
func (m *MockIEEERepository) GetCount(ctx context.Context, tenantID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockIEEERepositoryMockRecorder) GetCount(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockIEEERepository)(nil).GetCount), ctx, tenantID)
}

// Insert mocks base method.
func (m *MockIEEERepository) Insert(ctx context.Context, p *entity.IEEE8021xConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockIEEERepositoryMockRecorder) Insert(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIEEERepository)(nil).Insert), ctx, p)
}

// Update mocks base method.
func (m *MockIEEERepository) Update(ctx context.Context, p *entity.IEEE8021xConfig) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIEEERepositoryMockRecorder) Update(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIEEERepository)(nil).Update), ctx, p)
}

// MockIEEEFeature is a mock of Feature interface.
type MockIEEEFeature struct {
	ctrl     *gomock.Controller
	recorder *MockIEEEFeatureMockRecorder
}

// MockIEEEFeatureMockRecorder is the mock recorder for MockIEEEFeature.
type MockIEEEFeatureMockRecorder struct {
	mock *MockIEEEFeature
}

// NewMockIEEEFeature creates a new mock instance.
func NewMockIEEEFeature(ctrl *gomock.Controller) *MockIEEEFeature {
	mock := &MockIEEEFeature{ctrl: ctrl}
	mock.recorder = &MockIEEEFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEEEFeature) EXPECT() *MockIEEEFeatureMockRecorder {
	return m.recorder
}

// CheckProfileExists mocks base method.
func (m *MockIEEEFeature) CheckProfileExists(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProfileExists", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProfileExists indicates an expected call of CheckProfileExists.
func (mr *MockIEEEFeatureMockRecorder) CheckProfileExists(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProfileExists", reflect.TypeOf((*MockIEEEFeature)(nil).CheckProfileExists), ctx, profileName, tenantID)
}

// Delete mocks base method.
func (m *MockIEEEFeature) Delete(ctx context.Context, profileName, tenantID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, profileName, tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIEEEFeatureMockRecorder) Delete(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIEEEFeature)(nil).Delete), ctx, profileName, tenantID)
}

// Get mocks base method.
func (m *MockIEEEFeature) Get(ctx context.Context, top, skip int, tenantID string) ([]dto.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]dto.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIEEEFeatureMockRecorder) Get(ctx, top, skip, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIEEEFeature)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockIEEEFeature) GetByName(ctx context.Context, profileName, tenantID string) (*dto.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, profileName, tenantID)
	ret0, _ := ret[0].(*dto.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIEEEFeatureMockRecorder) GetByName(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIEEEFeature)(nil).GetByName), ctx, profileName, tenantID)
}

// GetCount mocks base method.
func (m *MockIEEEFeature) GetCount(ctx context.Context, tenantID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockIEEEFeatureMockRecorder) GetCount(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockIEEEFeature)(nil).GetCount), ctx, tenantID)
}

// Insert mocks base method.
func (m *MockIEEEFeature) Insert(ctx context.Context, p *dto.IEEE8021xConfig) (*dto.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(*dto.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockIEEEFeatureMockRecorder) Insert(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIEEEFeature)(nil).Insert), ctx, p)
}

// Update mocks base method.
func (m *MockIEEEFeature) Update(ctx context.Context, p *dto.IEEE8021xConfig) (*dto.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(*dto.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIEEEFeatureMockRecorder) Update(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIEEEFeature)(nil).Update), ctx, p)
}
