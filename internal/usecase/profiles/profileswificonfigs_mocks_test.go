// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/profilewificonfigs/interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/profilewificonfigs/interfaces.go -package profiles_test -mock_names Repository=MockProfileWiFiConfigsRepository,Feature=MockProfileWiFiConfigsFeature
//

// Package profiles_test is a generated GoMock package.
package profiles_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/open-amt-cloud-toolkit/console/internal/entity"
	dto "github.com/open-amt-cloud-toolkit/console/internal/entity/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockProfileWiFiConfigsRepository is a mock of Repository interface.
type MockProfileWiFiConfigsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProfileWiFiConfigsRepositoryMockRecorder
}

// MockProfileWiFiConfigsRepositoryMockRecorder is the mock recorder for MockProfileWiFiConfigsRepository.
type MockProfileWiFiConfigsRepositoryMockRecorder struct {
	mock *MockProfileWiFiConfigsRepository
}

// NewMockProfileWiFiConfigsRepository creates a new mock instance.
func NewMockProfileWiFiConfigsRepository(ctrl *gomock.Controller) *MockProfileWiFiConfigsRepository {
	mock := &MockProfileWiFiConfigsRepository{ctrl: ctrl}
	mock.recorder = &MockProfileWiFiConfigsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileWiFiConfigsRepository) EXPECT() *MockProfileWiFiConfigsRepositoryMockRecorder {
	return m.recorder
}

// DeleteByProfileName mocks base method.
func (m *MockProfileWiFiConfigsRepository) DeleteByProfileName(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProfileName", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByProfileName indicates an expected call of DeleteByProfileName.
func (mr *MockProfileWiFiConfigsRepositoryMockRecorder) DeleteByProfileName(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProfileName", reflect.TypeOf((*MockProfileWiFiConfigsRepository)(nil).DeleteByProfileName), ctx, profileName, tenantID)
}

// GetByProfileName mocks base method.
func (m *MockProfileWiFiConfigsRepository) GetByProfileName(ctx context.Context, profileName, tenantID string) ([]entity.ProfileWiFiConfigs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProfileName", ctx, profileName, tenantID)
	ret0, _ := ret[0].([]entity.ProfileWiFiConfigs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProfileName indicates an expected call of GetByProfileName.
func (mr *MockProfileWiFiConfigsRepositoryMockRecorder) GetByProfileName(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProfileName", reflect.TypeOf((*MockProfileWiFiConfigsRepository)(nil).GetByProfileName), ctx, profileName, tenantID)
}

// Insert mocks base method.
func (m *MockProfileWiFiConfigsRepository) Insert(ctx context.Context, p *entity.ProfileWiFiConfigs) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockProfileWiFiConfigsRepositoryMockRecorder) Insert(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProfileWiFiConfigsRepository)(nil).Insert), ctx, p)
}

// MockProfileWiFiConfigsFeature is a mock of Feature interface.
type MockProfileWiFiConfigsFeature struct {
	ctrl     *gomock.Controller
	recorder *MockProfileWiFiConfigsFeatureMockRecorder
}

// MockProfileWiFiConfigsFeatureMockRecorder is the mock recorder for MockProfileWiFiConfigsFeature.
type MockProfileWiFiConfigsFeatureMockRecorder struct {
	mock *MockProfileWiFiConfigsFeature
}

// NewMockProfileWiFiConfigsFeature creates a new mock instance.
func NewMockProfileWiFiConfigsFeature(ctrl *gomock.Controller) *MockProfileWiFiConfigsFeature {
	mock := &MockProfileWiFiConfigsFeature{ctrl: ctrl}
	mock.recorder = &MockProfileWiFiConfigsFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileWiFiConfigsFeature) EXPECT() *MockProfileWiFiConfigsFeatureMockRecorder {
	return m.recorder
}

// DeleteByProfileName mocks base method.
func (m *MockProfileWiFiConfigsFeature) DeleteByProfileName(ctx context.Context, profileName, tenantID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProfileName", ctx, profileName, tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByProfileName indicates an expected call of DeleteByProfileName.
func (mr *MockProfileWiFiConfigsFeatureMockRecorder) DeleteByProfileName(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProfileName", reflect.TypeOf((*MockProfileWiFiConfigsFeature)(nil).DeleteByProfileName), ctx, profileName, tenantID)
}

// GetByProfileName mocks base method.
func (m *MockProfileWiFiConfigsFeature) GetByProfileName(ctx context.Context, profileName, tenantID string) ([]dto.ProfileWiFiConfigs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProfileName", ctx, profileName, tenantID)
	ret0, _ := ret[0].([]dto.ProfileWiFiConfigs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProfileName indicates an expected call of GetByProfileName.
func (mr *MockProfileWiFiConfigsFeatureMockRecorder) GetByProfileName(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProfileName", reflect.TypeOf((*MockProfileWiFiConfigsFeature)(nil).GetByProfileName), ctx, profileName, tenantID)
}

// Insert mocks base method.
func (m *MockProfileWiFiConfigsFeature) Insert(ctx context.Context, p *dto.ProfileWiFiConfigs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockProfileWiFiConfigsFeatureMockRecorder) Insert(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProfileWiFiConfigsFeature)(nil).Insert), ctx, p)
}
