// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/interface.go
//
// Generated by this command:
//
//	mockgen -source ./internal/app/interface.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	http "net/http"
	reflect "reflect"

	websocket "github.com/gorilla/websocket"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// ExecContext mocks base method.
func (m *MockDB) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDBMockRecorder) ExecContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDB)(nil).ExecContext), varargs...)
}

// QueryContext mocks base method.
func (m *MockDB) QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockDBMockRecorder) QueryContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockDB)(nil).QueryContext), varargs...)
}

// MockHTTPServer is a mock of HTTPServer interface.
type MockHTTPServer struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPServerMockRecorder
}

// MockHTTPServerMockRecorder is the mock recorder for MockHTTPServer.
type MockHTTPServerMockRecorder struct {
	mock *MockHTTPServer
}

// NewMockHTTPServer creates a new mock instance.
func NewMockHTTPServer(ctrl *gomock.Controller) *MockHTTPServer {
	mock := &MockHTTPServer{ctrl: ctrl}
	mock.recorder = &MockHTTPServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPServer) EXPECT() *MockHTTPServerMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockHTTPServer) Notify() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockHTTPServerMockRecorder) Notify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockHTTPServer)(nil).Notify))
}

// Shutdown mocks base method.
func (m *MockHTTPServer) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockHTTPServerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockHTTPServer)(nil).Shutdown))
}

// Start mocks base method.
func (m *MockHTTPServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockHTTPServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockHTTPServer)(nil).Start))
}

// MockWebSocketUpgrader is a mock of WebSocketUpgrader interface.
type MockWebSocketUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockWebSocketUpgraderMockRecorder
}

// MockWebSocketUpgraderMockRecorder is the mock recorder for MockWebSocketUpgrader.
type MockWebSocketUpgraderMockRecorder struct {
	mock *MockWebSocketUpgrader
}

// NewMockWebSocketUpgrader creates a new mock instance.
func NewMockWebSocketUpgrader(ctrl *gomock.Controller) *MockWebSocketUpgrader {
	mock := &MockWebSocketUpgrader{ctrl: ctrl}
	mock.recorder = &MockWebSocketUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebSocketUpgrader) EXPECT() *MockWebSocketUpgraderMockRecorder {
	return m.recorder
}

// Upgrade mocks base method.
func (m *MockWebSocketUpgrader) Upgrade(w http.ResponseWriter, r *http.Request, responseHeader http.Header) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", w, r, responseHeader)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockWebSocketUpgraderMockRecorder) Upgrade(w, r, responseHeader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockWebSocketUpgrader)(nil).Upgrade), w, r, responseHeader)
}
