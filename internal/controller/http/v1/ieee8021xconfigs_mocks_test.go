// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/ieee8021xconfigs/interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/ieee8021xconfigs/interfaces.go -package v1 -mock_names Repository=MockIEEE8021xConfigsRepository,Feature=MockIEEE8021xConfigsFeature
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	entity "github.com/open-amt-cloud-toolkit/console/internal/entity"
	dto "github.com/open-amt-cloud-toolkit/console/internal/entity/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIEEE8021xConfigsRepository is a mock of Repository interface.
type MockIEEE8021xConfigsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIEEE8021xConfigsRepositoryMockRecorder
}

// MockIEEE8021xConfigsRepositoryMockRecorder is the mock recorder for MockIEEE8021xConfigsRepository.
type MockIEEE8021xConfigsRepositoryMockRecorder struct {
	mock *MockIEEE8021xConfigsRepository
}

// NewMockIEEE8021xConfigsRepository creates a new mock instance.
func NewMockIEEE8021xConfigsRepository(ctrl *gomock.Controller) *MockIEEE8021xConfigsRepository {
	mock := &MockIEEE8021xConfigsRepository{ctrl: ctrl}
	mock.recorder = &MockIEEE8021xConfigsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEEE8021xConfigsRepository) EXPECT() *MockIEEE8021xConfigsRepositoryMockRecorder {
	return m.recorder
}

// CheckProfileExists mocks base method.
func (m *MockIEEE8021xConfigsRepository) CheckProfileExists(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProfileExists", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProfileExists indicates an expected call of CheckProfileExists.
func (mr *MockIEEE8021xConfigsRepositoryMockRecorder) CheckProfileExists(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProfileExists", reflect.TypeOf((*MockIEEE8021xConfigsRepository)(nil).CheckProfileExists), ctx, profileName, tenantID)
}

// Delete mocks base method.
func (m *MockIEEE8021xConfigsRepository) Delete(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIEEE8021xConfigsRepositoryMockRecorder) Delete(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIEEE8021xConfigsRepository)(nil).Delete), ctx, profileName, tenantID)
}

// Get mocks base method.
func (m *MockIEEE8021xConfigsRepository) Get(ctx context.Context, top, skip int, tenantID string) ([]entity.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]entity.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIEEE8021xConfigsRepositoryMockRecorder) Get(ctx, top, skip, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIEEE8021xConfigsRepository)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockIEEE8021xConfigsRepository) GetByName(ctx context.Context, profileName, tenantID string) (*entity.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, profileName, tenantID)
	ret0, _ := ret[0].(*entity.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIEEE8021xConfigsRepositoryMockRecorder) GetByName(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIEEE8021xConfigsRepository)(nil).GetByName), ctx, profileName, tenantID)
}

// GetCount mocks base method.
func (m *MockIEEE8021xConfigsRepository) GetCount(ctx context.Context, tenantID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockIEEE8021xConfigsRepositoryMockRecorder) GetCount(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockIEEE8021xConfigsRepository)(nil).GetCount), ctx, tenantID)
}

// Insert mocks base method.
func (m *MockIEEE8021xConfigsRepository) Insert(ctx context.Context, p *entity.IEEE8021xConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockIEEE8021xConfigsRepositoryMockRecorder) Insert(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIEEE8021xConfigsRepository)(nil).Insert), ctx, p)
}

// Update mocks base method.
func (m *MockIEEE8021xConfigsRepository) Update(ctx context.Context, p *entity.IEEE8021xConfig) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIEEE8021xConfigsRepositoryMockRecorder) Update(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIEEE8021xConfigsRepository)(nil).Update), ctx, p)
}

// MockIEEE8021xConfigsFeature is a mock of Feature interface.
type MockIEEE8021xConfigsFeature struct {
	ctrl     *gomock.Controller
	recorder *MockIEEE8021xConfigsFeatureMockRecorder
}

// MockIEEE8021xConfigsFeatureMockRecorder is the mock recorder for MockIEEE8021xConfigsFeature.
type MockIEEE8021xConfigsFeatureMockRecorder struct {
	mock *MockIEEE8021xConfigsFeature
}

// NewMockIEEE8021xConfigsFeature creates a new mock instance.
func NewMockIEEE8021xConfigsFeature(ctrl *gomock.Controller) *MockIEEE8021xConfigsFeature {
	mock := &MockIEEE8021xConfigsFeature{ctrl: ctrl}
	mock.recorder = &MockIEEE8021xConfigsFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEEE8021xConfigsFeature) EXPECT() *MockIEEE8021xConfigsFeatureMockRecorder {
	return m.recorder
}

// CheckProfileExists mocks base method.
func (m *MockIEEE8021xConfigsFeature) CheckProfileExists(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProfileExists", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProfileExists indicates an expected call of CheckProfileExists.
func (mr *MockIEEE8021xConfigsFeatureMockRecorder) CheckProfileExists(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProfileExists", reflect.TypeOf((*MockIEEE8021xConfigsFeature)(nil).CheckProfileExists), ctx, profileName, tenantID)
}

// Delete mocks base method.
func (m *MockIEEE8021xConfigsFeature) Delete(ctx context.Context, profileName, tenantID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, profileName, tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIEEE8021xConfigsFeatureMockRecorder) Delete(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIEEE8021xConfigsFeature)(nil).Delete), ctx, profileName, tenantID)
}

// Get mocks base method.
func (m *MockIEEE8021xConfigsFeature) Get(ctx context.Context, top, skip int, tenantID string) ([]dto.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]dto.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIEEE8021xConfigsFeatureMockRecorder) Get(ctx, top, skip, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIEEE8021xConfigsFeature)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockIEEE8021xConfigsFeature) GetByName(ctx context.Context, profileName, tenantID string) (*dto.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, profileName, tenantID)
	ret0, _ := ret[0].(*dto.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIEEE8021xConfigsFeatureMockRecorder) GetByName(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIEEE8021xConfigsFeature)(nil).GetByName), ctx, profileName, tenantID)
}

// GetCount mocks base method.
func (m *MockIEEE8021xConfigsFeature) GetCount(ctx context.Context, tenantID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockIEEE8021xConfigsFeatureMockRecorder) GetCount(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockIEEE8021xConfigsFeature)(nil).GetCount), ctx, tenantID)
}

// Insert mocks base method.
func (m *MockIEEE8021xConfigsFeature) Insert(ctx context.Context, p *dto.IEEE8021xConfig) (*dto.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(*dto.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockIEEE8021xConfigsFeatureMockRecorder) Insert(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIEEE8021xConfigsFeature)(nil).Insert), ctx, p)
}

// Update mocks base method.
func (m *MockIEEE8021xConfigsFeature) Update(ctx context.Context, p *dto.IEEE8021xConfig) (*dto.IEEE8021xConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(*dto.IEEE8021xConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIEEE8021xConfigsFeatureMockRecorder) Update(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIEEE8021xConfigsFeature)(nil).Update), ctx, p)
}
