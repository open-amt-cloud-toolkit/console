// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/ciraconfigs/interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/ciraconfigs/interfaces.go -package v1 -mock_names Repository=MockCIRAConfigsRepository,Feature=MockCIRAConfigsFeature
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	entity "github.com/open-amt-cloud-toolkit/console/internal/entity"
	dto "github.com/open-amt-cloud-toolkit/console/internal/entity/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockCIRAConfigsRepository is a mock of Repository interface.
type MockCIRAConfigsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCIRAConfigsRepositoryMockRecorder
}

// MockCIRAConfigsRepositoryMockRecorder is the mock recorder for MockCIRAConfigsRepository.
type MockCIRAConfigsRepositoryMockRecorder struct {
	mock *MockCIRAConfigsRepository
}

// NewMockCIRAConfigsRepository creates a new mock instance.
func NewMockCIRAConfigsRepository(ctrl *gomock.Controller) *MockCIRAConfigsRepository {
	mock := &MockCIRAConfigsRepository{ctrl: ctrl}
	mock.recorder = &MockCIRAConfigsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCIRAConfigsRepository) EXPECT() *MockCIRAConfigsRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCIRAConfigsRepository) Delete(ctx context.Context, profileName, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, profileName, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCIRAConfigsRepositoryMockRecorder) Delete(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCIRAConfigsRepository)(nil).Delete), ctx, profileName, tenantID)
}

// Get mocks base method.
func (m *MockCIRAConfigsRepository) Get(ctx context.Context, top, skip int, tenantID string) ([]entity.CIRAConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]entity.CIRAConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCIRAConfigsRepositoryMockRecorder) Get(ctx, top, skip, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCIRAConfigsRepository)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockCIRAConfigsRepository) GetByName(ctx context.Context, configName, tenantID string) (*entity.CIRAConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, configName, tenantID)
	ret0, _ := ret[0].(*entity.CIRAConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockCIRAConfigsRepositoryMockRecorder) GetByName(ctx, configName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockCIRAConfigsRepository)(nil).GetByName), ctx, configName, tenantID)
}

// GetCount mocks base method.
func (m *MockCIRAConfigsRepository) GetCount(ctx context.Context, tenantID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockCIRAConfigsRepositoryMockRecorder) GetCount(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockCIRAConfigsRepository)(nil).GetCount), ctx, tenantID)
}

// Insert mocks base method.
func (m *MockCIRAConfigsRepository) Insert(ctx context.Context, p *entity.CIRAConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockCIRAConfigsRepositoryMockRecorder) Insert(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCIRAConfigsRepository)(nil).Insert), ctx, p)
}

// Update mocks base method.
func (m *MockCIRAConfigsRepository) Update(ctx context.Context, p *entity.CIRAConfig) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCIRAConfigsRepositoryMockRecorder) Update(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCIRAConfigsRepository)(nil).Update), ctx, p)
}

// MockCIRAConfigsFeature is a mock of Feature interface.
type MockCIRAConfigsFeature struct {
	ctrl     *gomock.Controller
	recorder *MockCIRAConfigsFeatureMockRecorder
}

// MockCIRAConfigsFeatureMockRecorder is the mock recorder for MockCIRAConfigsFeature.
type MockCIRAConfigsFeatureMockRecorder struct {
	mock *MockCIRAConfigsFeature
}

// NewMockCIRAConfigsFeature creates a new mock instance.
func NewMockCIRAConfigsFeature(ctrl *gomock.Controller) *MockCIRAConfigsFeature {
	mock := &MockCIRAConfigsFeature{ctrl: ctrl}
	mock.recorder = &MockCIRAConfigsFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCIRAConfigsFeature) EXPECT() *MockCIRAConfigsFeatureMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCIRAConfigsFeature) Delete(ctx context.Context, profileName, tenantID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, profileName, tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCIRAConfigsFeatureMockRecorder) Delete(ctx, profileName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCIRAConfigsFeature)(nil).Delete), ctx, profileName, tenantID)
}

// Get mocks base method.
func (m *MockCIRAConfigsFeature) Get(ctx context.Context, top, skip int, tenantID string) ([]dto.CIRAConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]dto.CIRAConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCIRAConfigsFeatureMockRecorder) Get(ctx, top, skip, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCIRAConfigsFeature)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockCIRAConfigsFeature) GetByName(ctx context.Context, configName, tenantID string) (*dto.CIRAConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, configName, tenantID)
	ret0, _ := ret[0].(*dto.CIRAConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockCIRAConfigsFeatureMockRecorder) GetByName(ctx, configName, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockCIRAConfigsFeature)(nil).GetByName), ctx, configName, tenantID)
}

// GetCount mocks base method.
func (m *MockCIRAConfigsFeature) GetCount(ctx context.Context, tenantID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", ctx, tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockCIRAConfigsFeatureMockRecorder) GetCount(ctx, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockCIRAConfigsFeature)(nil).GetCount), ctx, tenantID)
}

// Insert mocks base method.
func (m *MockCIRAConfigsFeature) Insert(ctx context.Context, p *dto.CIRAConfig) (*dto.CIRAConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, p)
	ret0, _ := ret[0].(*dto.CIRAConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockCIRAConfigsFeatureMockRecorder) Insert(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCIRAConfigsFeature)(nil).Insert), ctx, p)
}

// Update mocks base method.
func (m *MockCIRAConfigsFeature) Update(ctx context.Context, p *dto.CIRAConfig) (*dto.CIRAConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p)
	ret0, _ := ret[0].(*dto.CIRAConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCIRAConfigsFeatureMockRecorder) Update(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCIRAConfigsFeature)(nil).Update), ctx, p)
}
