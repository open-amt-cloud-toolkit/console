// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/domains/interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/domains/interfaces.go -package v1 -mock_names Repository=MockDomainsRepository,Feature=MockDomainsFeature
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	entity "github.com/open-amt-cloud-toolkit/console/internal/entity"
	dto "github.com/open-amt-cloud-toolkit/console/internal/entity/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainsRepository is a mock of Repository interface.
type MockDomainsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDomainsRepositoryMockRecorder
}

// MockDomainsRepositoryMockRecorder is the mock recorder for MockDomainsRepository.
type MockDomainsRepositoryMockRecorder struct {
	mock *MockDomainsRepository
}

// NewMockDomainsRepository creates a new mock instance.
func NewMockDomainsRepository(ctrl *gomock.Controller) *MockDomainsRepository {
	mock := &MockDomainsRepository{ctrl: ctrl}
	mock.recorder = &MockDomainsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainsRepository) EXPECT() *MockDomainsRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDomainsRepository) Delete(ctx context.Context, name, tenantID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, tenantID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDomainsRepositoryMockRecorder) Delete(ctx, name, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDomainsRepository)(nil).Delete), ctx, name, tenantID)
}

// Get mocks base method.
func (m *MockDomainsRepository) Get(ctx context.Context, top, skip int, tenantID string) ([]entity.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]entity.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDomainsRepositoryMockRecorder) Get(ctx, top, skip, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDomainsRepository)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockDomainsRepository) GetByName(ctx context.Context, name, tenantID string) (*entity.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name, tenantID)
	ret0, _ := ret[0].(*entity.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockDomainsRepositoryMockRecorder) GetByName(ctx, name, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockDomainsRepository)(nil).GetByName), ctx, name, tenantID)
}

// GetCount mocks base method.
func (m *MockDomainsRepository) GetCount(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockDomainsRepositoryMockRecorder) GetCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockDomainsRepository)(nil).GetCount), arg0, arg1)
}

// GetDomainByDomainSuffix mocks base method.
func (m *MockDomainsRepository) GetDomainByDomainSuffix(ctx context.Context, domainSuffix, tenantID string) (*entity.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainByDomainSuffix", ctx, domainSuffix, tenantID)
	ret0, _ := ret[0].(*entity.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainByDomainSuffix indicates an expected call of GetDomainByDomainSuffix.
func (mr *MockDomainsRepositoryMockRecorder) GetDomainByDomainSuffix(ctx, domainSuffix, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainByDomainSuffix", reflect.TypeOf((*MockDomainsRepository)(nil).GetDomainByDomainSuffix), ctx, domainSuffix, tenantID)
}

// Insert mocks base method.
func (m *MockDomainsRepository) Insert(ctx context.Context, d *entity.Domain) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, d)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockDomainsRepositoryMockRecorder) Insert(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDomainsRepository)(nil).Insert), ctx, d)
}

// Update mocks base method.
func (m *MockDomainsRepository) Update(ctx context.Context, d *entity.Domain) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, d)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDomainsRepositoryMockRecorder) Update(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDomainsRepository)(nil).Update), ctx, d)
}

// MockDomainsFeature is a mock of Feature interface.
type MockDomainsFeature struct {
	ctrl     *gomock.Controller
	recorder *MockDomainsFeatureMockRecorder
}

// MockDomainsFeatureMockRecorder is the mock recorder for MockDomainsFeature.
type MockDomainsFeatureMockRecorder struct {
	mock *MockDomainsFeature
}

// NewMockDomainsFeature creates a new mock instance.
func NewMockDomainsFeature(ctrl *gomock.Controller) *MockDomainsFeature {
	mock := &MockDomainsFeature{ctrl: ctrl}
	mock.recorder = &MockDomainsFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainsFeature) EXPECT() *MockDomainsFeatureMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDomainsFeature) Delete(ctx context.Context, name, tenantID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDomainsFeatureMockRecorder) Delete(ctx, name, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDomainsFeature)(nil).Delete), ctx, name, tenantID)
}

// Get mocks base method.
func (m *MockDomainsFeature) Get(ctx context.Context, top, skip int, tenantID string) ([]dto.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, top, skip, tenantID)
	ret0, _ := ret[0].([]dto.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDomainsFeatureMockRecorder) Get(ctx, top, skip, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDomainsFeature)(nil).Get), ctx, top, skip, tenantID)
}

// GetByName mocks base method.
func (m *MockDomainsFeature) GetByName(ctx context.Context, name, tenantID string) (*dto.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name, tenantID)
	ret0, _ := ret[0].(*dto.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockDomainsFeatureMockRecorder) GetByName(ctx, name, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockDomainsFeature)(nil).GetByName), ctx, name, tenantID)
}

// GetCount mocks base method.
func (m *MockDomainsFeature) GetCount(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockDomainsFeatureMockRecorder) GetCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockDomainsFeature)(nil).GetCount), arg0, arg1)
}

// GetDomainByDomainSuffix mocks base method.
func (m *MockDomainsFeature) GetDomainByDomainSuffix(ctx context.Context, domainSuffix, tenantID string) (*dto.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainByDomainSuffix", ctx, domainSuffix, tenantID)
	ret0, _ := ret[0].(*dto.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainByDomainSuffix indicates an expected call of GetDomainByDomainSuffix.
func (mr *MockDomainsFeatureMockRecorder) GetDomainByDomainSuffix(ctx, domainSuffix, tenantID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainByDomainSuffix", reflect.TypeOf((*MockDomainsFeature)(nil).GetDomainByDomainSuffix), ctx, domainSuffix, tenantID)
}

// Insert mocks base method.
func (m *MockDomainsFeature) Insert(ctx context.Context, d *dto.Domain) (*dto.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, d)
	ret0, _ := ret[0].(*dto.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockDomainsFeatureMockRecorder) Insert(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDomainsFeature)(nil).Insert), ctx, d)
}

// Update mocks base method.
func (m *MockDomainsFeature) Update(ctx context.Context, d *dto.Domain) (*dto.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, d)
	ret0, _ := ret[0].(*dto.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDomainsFeatureMockRecorder) Update(ctx, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDomainsFeature)(nil).Update), ctx, d)
}
